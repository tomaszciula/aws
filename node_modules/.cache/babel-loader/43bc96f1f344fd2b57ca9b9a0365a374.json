{"ast":null,"code":"'use strict';\n\nclass QuickLRU {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!(options.maxSize && options.maxSize > 0)) {\n      throw new TypeError('`maxSize` must be a number greater than 0');\n    }\n\n    this.maxSize = options.maxSize;\n    this.cache = new Map();\n    this.oldCache = new Map();\n    this._size = 0;\n  }\n\n  _set(key, value) {\n    this.cache.set(key, value);\n    this._size++;\n\n    if (this._size >= this.maxSize) {\n      this._size = 0;\n      this.oldCache = this.cache;\n      this.cache = new Map();\n    }\n  }\n\n  get(key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n\n    if (this.oldCache.has(key)) {\n      const value = this.oldCache.get(key);\n      this.oldCache.delete(key);\n\n      this._set(key, value);\n\n      return value;\n    }\n  }\n\n  set(key, value) {\n    if (this.cache.has(key)) {\n      this.cache.set(key, value);\n    } else {\n      this._set(key, value);\n    }\n\n    return this;\n  }\n\n  has(key) {\n    return this.cache.has(key) || this.oldCache.has(key);\n  }\n\n  peek(key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n\n    if (this.oldCache.has(key)) {\n      return this.oldCache.get(key);\n    }\n  }\n\n  delete(key) {\n    const deleted = this.cache.delete(key);\n\n    if (deleted) {\n      this._size--;\n    }\n\n    return this.oldCache.delete(key) || deleted;\n  }\n\n  clear() {\n    this.cache.clear();\n    this.oldCache.clear();\n    this._size = 0;\n  }\n\n  *keys() {\n    for (const [key] of this) {\n      yield key;\n    }\n  }\n\n  *values() {\n    for (const [, value] of this) {\n      yield value;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    for (const item of this.cache) {\n      yield item;\n    }\n\n    for (const item of this.oldCache) {\n      const [key] = item;\n\n      if (!this.cache.has(key)) {\n        yield item;\n      }\n    }\n  }\n\n  get size() {\n    let oldCacheSize = 0;\n\n    for (const key of this.oldCache.keys()) {\n      if (!this.cache.has(key)) {\n        oldCacheSize++;\n      }\n    }\n\n    return this._size + oldCacheSize;\n  }\n\n}\n\nmodule.exports = QuickLRU;","map":{"version":3,"sources":["/Users/tomaszciula/projects/aws/node_modules/quick-lru/index.js"],"names":["QuickLRU","constructor","options","maxSize","TypeError","cache","Map","oldCache","_size","_set","key","value","set","get","has","delete","peek","deleted","clear","keys","values","Symbol","iterator","item","size","oldCacheSize","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nclass QuickLRU {\n\tconstructor(options = {}) {\n\t\tif (!(options.maxSize && options.maxSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tthis.maxSize = options.maxSize;\n\t\tthis.cache = new Map();\n\t\tthis.oldCache = new Map();\n\t\tthis._size = 0;\n\t}\n\n\t_set(key, value) {\n\t\tthis.cache.set(key, value);\n\t\tthis._size++;\n\n\t\tif (this._size >= this.maxSize) {\n\t\t\tthis._size = 0;\n\t\t\tthis.oldCache = this.cache;\n\t\t\tthis.cache = new Map();\n\t\t}\n\t}\n\n\tget(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this.cache.get(key);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\tconst value = this.oldCache.get(key);\n\t\t\tthis.oldCache.delete(key);\n\t\t\tthis._set(key, value);\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tset(key, value) {\n\t\tif (this.cache.has(key)) {\n\t\t\tthis.cache.set(key, value);\n\t\t} else {\n\t\t\tthis._set(key, value);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\thas(key) {\n\t\treturn this.cache.has(key) || this.oldCache.has(key);\n\t}\n\n\tpeek(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this.cache.get(key);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\treturn this.oldCache.get(key);\n\t\t}\n\t}\n\n\tdelete(key) {\n\t\tconst deleted = this.cache.delete(key);\n\t\tif (deleted) {\n\t\t\tthis._size--;\n\t\t}\n\n\t\treturn this.oldCache.delete(key) || deleted;\n\t}\n\n\tclear() {\n\t\tthis.cache.clear();\n\t\tthis.oldCache.clear();\n\t\tthis._size = 0;\n\t}\n\n\t* keys() {\n\t\tfor (const [key] of this) {\n\t\t\tyield key;\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const [, value] of this) {\n\t\t\tyield value;\n\t\t}\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const item of this.cache) {\n\t\t\tyield item;\n\t\t}\n\n\t\tfor (const item of this.oldCache) {\n\t\t\tconst [key] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t}\n\t}\n\n\tget size() {\n\t\tlet oldCacheSize = 0;\n\t\tfor (const key of this.oldCache.keys()) {\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\toldCacheSize++;\n\t\t\t}\n\t\t}\n\n\t\treturn this._size + oldCacheSize;\n\t}\n}\n\nmodule.exports = QuickLRU;\n"]},"metadata":{},"sourceType":"script"}