{"ast":null,"code":"/**\n * Give an input string, strictly parses a boolean value.\n *\n * @param value The boolean string to parse.\n * @returns true for \"true\", false for \"false\", otherwise an error is thrown.\n */\nexport var parseBoolean = function (value) {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      throw new Error(\"Unable to parse boolean value \\\"\" + value + \"\\\"\");\n  }\n};\n/*\n * Asserts a value is a boolean and returns it.\n *\n * @param value A value that is expected to be a boolean.\n * @returns The value if it's a boolean, undefined if it's null/undefined,\n *   otherwise an error is thrown.\n */\n\nexport var expectBoolean = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected boolean, got \" + typeof value);\n};\n/**\n * Asserts a value is a number and returns it.\n *\n * @param value A value that is expected to be a number.\n * @returns The value if it's a number, undefined if it's null/undefined,\n *   otherwise an error is thrown.\n */\n\nexport var expectNumber = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected number, got \" + typeof value);\n};\n/**\n * Asserts a value is a string and returns it.\n *\n * @param value A value that is expected to be a string.\n * @returns The value if it's a string, undefined if it's null/undefined,\n *   otherwise an error is thrown.\n */\n\nexport var expectString = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected string, got \" + typeof value);\n};\n/**\n * Asserts a value is a number and returns it, and also converts string\n * representations of non-numeric floats into Numbers.\n *\n * @param value A number or string representation of a non-numeric float.\n * @returns The value as a number, undefined if it's null/undefined,\n *     otherwise an error is thrown.\n */\n\nexport var handleFloat = function (value) {\n  if (typeof value == \"string\") {\n    switch (value) {\n      case \"NaN\":\n        return NaN;\n\n      case \"Infinity\":\n        return Infinity;\n\n      case \"-Infinity\":\n        return -Infinity;\n\n      default:\n        throw new Error(\"Unable to parse float value: \" + value);\n    }\n  }\n\n  return expectNumber(value);\n};","map":{"version":3,"sources":["../../src/parse-utils.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AACH,OAAO,IAAM,YAAY,GAAG,UAAC,KAAD,EAAc;AACxC,UAAQ,KAAR;AACE,SAAK,MAAL;AACE,aAAO,IAAP;;AACF,SAAK,OAAL;AACE,aAAO,KAAP;;AACF;AACE,YAAM,IAAI,KAAJ,CAAU,qCAAkC,KAAlC,GAAuC,IAAjD,CAAN;AANJ;AAQD,CATM;AAWP;;;;;;AAMG;;AACH,OAAO,IAAM,aAAa,GAAG,UAAC,KAAD,EAAW;AACtC,MAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAAhC,EAA2C;AACzC,WAAO,SAAP;AACD;;AACD,MAAI,OAAO,KAAP,KAAiB,SAArB,EAAgC;AAC9B,WAAO,KAAP;AACD;;AACD,QAAM,IAAI,SAAJ,CAAc,2BAAyB,OAAO,KAA9C,CAAN;AACD,CARM;AAUP;;;;;;AAMG;;AACH,OAAO,IAAM,YAAY,GAAG,UAAC,KAAD,EAAW;AACrC,MAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAAhC,EAA2C;AACzC,WAAO,SAAP;AACD;;AACD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,KAAP;AACD;;AACD,QAAM,IAAI,SAAJ,CAAc,0BAAwB,OAAO,KAA7C,CAAN;AACD,CARM;AAUP;;;;;;AAMG;;AACH,OAAO,IAAM,YAAY,GAAG,UAAC,KAAD,EAAW;AACrC,MAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAAhC,EAA2C;AACzC,WAAO,SAAP;AACD;;AACD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,KAAP;AACD;;AACD,QAAM,IAAI,SAAJ,CAAc,0BAAwB,OAAO,KAA7C,CAAN;AACD,CARM;AAUP;;;;;;;AAOG;;AACH,OAAO,IAAM,WAAW,GAAG,UAAC,KAAD,EAAuB;AAChD,MAAI,OAAO,KAAP,IAAgB,QAApB,EAA8B;AAC5B,YAAQ,KAAR;AACE,WAAK,KAAL;AACE,eAAO,GAAP;;AACF,WAAK,UAAL;AACE,eAAO,QAAP;;AACF,WAAK,WAAL;AACE,eAAO,CAAC,QAAR;;AACF;AACE,cAAM,IAAI,KAAJ,CAAU,kCAAgC,KAA1C,CAAN;AARJ;AAUD;;AACD,SAAO,YAAY,CAAC,KAAD,CAAnB;AACD,CAdM","sourcesContent":["/**\n * Give an input string, strictly parses a boolean value.\n *\n * @param value The boolean string to parse.\n * @returns true for \"true\", false for \"false\", otherwise an error is thrown.\n */\nexport const parseBoolean = (value: string): boolean => {\n  switch (value) {\n    case \"true\":\n      return true;\n    case \"false\":\n      return false;\n    default:\n      throw new Error(`Unable to parse boolean value \"${value}\"`);\n  }\n};\n\n/*\n * Asserts a value is a boolean and returns it.\n *\n * @param value A value that is expected to be a boolean.\n * @returns The value if it's a boolean, undefined if it's null/undefined,\n *   otherwise an error is thrown.\n */\nexport const expectBoolean = (value: any): boolean | undefined => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n  throw new TypeError(`Expected boolean, got ${typeof value}`);\n};\n\n/**\n * Asserts a value is a number and returns it.\n *\n * @param value A value that is expected to be a number.\n * @returns The value if it's a number, undefined if it's null/undefined,\n *   otherwise an error is thrown.\n */\nexport const expectNumber = (value: any): number | undefined => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n  if (typeof value === \"number\") {\n    return value;\n  }\n  throw new TypeError(`Expected number, got ${typeof value}`);\n};\n\n/**\n * Asserts a value is a string and returns it.\n *\n * @param value A value that is expected to be a string.\n * @returns The value if it's a string, undefined if it's null/undefined,\n *   otherwise an error is thrown.\n */\nexport const expectString = (value: any): string | undefined => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  throw new TypeError(`Expected string, got ${typeof value}`);\n};\n\n/**\n * Asserts a value is a number and returns it, and also converts string\n * representations of non-numeric floats into Numbers.\n *\n * @param value A number or string representation of a non-numeric float.\n * @returns The value as a number, undefined if it's null/undefined,\n *     otherwise an error is thrown.\n */\nexport const handleFloat = (value: string | number): number | undefined => {\n  if (typeof value == \"string\") {\n    switch (value) {\n      case \"NaN\":\n        return NaN;\n      case \"Infinity\":\n        return Infinity;\n      case \"-Infinity\":\n        return -Infinity;\n      default:\n        throw new Error(`Unable to parse float value: ${value}`);\n    }\n  }\n  return expectNumber(value);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}