{"ast":null,"code":"'use strict';\n\nconst mapObj = require('map-obj');\n\nconst camelCase = require('camelcase');\n\nconst QuickLru = require('quick-lru');\n\nconst has = (array, key) => array.some(x => {\n  if (typeof x === 'string') {\n    return x === key;\n  }\n\n  x.lastIndex = 0;\n  return x.test(key);\n});\n\nconst cache = new QuickLru({\n  maxSize: 100000\n}); // Reproduces behavior from `map-obj`\n\nconst isObject = value => typeof value === 'object' && value !== null && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\n\nconst camelCaseConvert = (input, options) => {\n  if (!isObject(input)) {\n    return input;\n  }\n\n  options = {\n    deep: false,\n    pascalCase: false,\n    ...options\n  };\n  const {\n    exclude,\n    pascalCase,\n    stopPaths,\n    deep\n  } = options;\n  const stopPathsSet = new Set(stopPaths);\n\n  const makeMapper = parentPath => (key, value) => {\n    if (deep && isObject(value)) {\n      const path = parentPath === undefined ? key : `${parentPath}.${key}`;\n\n      if (!stopPathsSet.has(path)) {\n        value = mapObj(value, makeMapper(path));\n      }\n    }\n\n    if (!(exclude && has(exclude, key))) {\n      const cacheKey = pascalCase ? `${key}_` : key;\n\n      if (cache.has(cacheKey)) {\n        key = cache.get(cacheKey);\n      } else {\n        const ret = camelCase(key, {\n          pascalCase\n        });\n\n        if (key.length < 100) {\n          // Prevent abuse\n          cache.set(cacheKey, ret);\n        }\n\n        key = ret;\n      }\n    }\n\n    return [key, value];\n  };\n\n  return mapObj(input, makeMapper(undefined));\n};\n\nmodule.exports = (input, options) => {\n  if (Array.isArray(input)) {\n    return Object.keys(input).map(key => camelCaseConvert(input[key], options));\n  }\n\n  return camelCaseConvert(input, options);\n};","map":{"version":3,"sources":["/Users/tomaszciula/projects/aws/node_modules/camelcase-keys/index.js"],"names":["mapObj","require","camelCase","QuickLru","has","array","key","some","x","lastIndex","test","cache","maxSize","isObject","value","RegExp","Error","Date","camelCaseConvert","input","options","deep","pascalCase","exclude","stopPaths","stopPathsSet","Set","makeMapper","parentPath","path","undefined","cacheKey","get","ret","length","set","module","exports","Array","isArray","Object","keys","map"],"mappings":"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","sourcesContent":["'use strict';\nconst mapObj = require('map-obj');\nconst camelCase = require('camelcase');\nconst QuickLru = require('quick-lru');\n\nconst has = (array, key) => array.some(x => {\n\tif (typeof x === 'string') {\n\t\treturn x === key;\n\t}\n\n\tx.lastIndex = 0;\n\treturn x.test(key);\n});\n\nconst cache = new QuickLru({maxSize: 100000});\n\n// Reproduces behavior from `map-obj`\nconst isObject = value =>\n\ttypeof value === 'object' &&\n\tvalue !== null &&\n\t!(value instanceof RegExp) &&\n\t!(value instanceof Error) &&\n\t!(value instanceof Date);\n\nconst camelCaseConvert = (input, options) => {\n\tif (!isObject(input)) {\n\t\treturn input;\n\t}\n\n\toptions = {\n\t\tdeep: false,\n\t\tpascalCase: false,\n\t\t...options\n\t};\n\n\tconst {exclude, pascalCase, stopPaths, deep} = options;\n\n\tconst stopPathsSet = new Set(stopPaths);\n\n\tconst makeMapper = parentPath => (key, value) => {\n\t\tif (deep && isObject(value)) {\n\t\t\tconst path = parentPath === undefined ? key : `${parentPath}.${key}`;\n\n\t\t\tif (!stopPathsSet.has(path)) {\n\t\t\t\tvalue = mapObj(value, makeMapper(path));\n\t\t\t}\n\t\t}\n\n\t\tif (!(exclude && has(exclude, key))) {\n\t\t\tconst cacheKey = pascalCase ? `${key}_` : key;\n\n\t\t\tif (cache.has(cacheKey)) {\n\t\t\t\tkey = cache.get(cacheKey);\n\t\t\t} else {\n\t\t\t\tconst ret = camelCase(key, {pascalCase});\n\n\t\t\t\tif (key.length < 100) { // Prevent abuse\n\t\t\t\t\tcache.set(cacheKey, ret);\n\t\t\t\t}\n\n\t\t\t\tkey = ret;\n\t\t\t}\n\t\t}\n\n\t\treturn [key, value];\n\t};\n\n\treturn mapObj(input, makeMapper(undefined));\n};\n\nmodule.exports = (input, options) => {\n\tif (Array.isArray(input)) {\n\t\treturn Object.keys(input).map(key => camelCaseConvert(input[key], options));\n\t}\n\n\treturn camelCaseConvert(input, options);\n};\n"]},"metadata":{},"sourceType":"script"}