{"ast":null,"code":"import { __awaiter, __extends, __generator, __rest } from \"tslib\";\nimport { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\n\nvar AdaptiveRetryStrategy =\n/** @class */\nfunction (_super) {\n  __extends(AdaptiveRetryStrategy, _super);\n\n  function AdaptiveRetryStrategy(maxAttemptsProvider, options) {\n    var _this = this;\n\n    var _a = options !== null && options !== void 0 ? options : {},\n        rateLimiter = _a.rateLimiter,\n        superOptions = __rest(_a, [\"rateLimiter\"]);\n\n    _this = _super.call(this, maxAttemptsProvider, superOptions) || this;\n    _this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter();\n    _this.mode = RETRY_MODES.ADAPTIVE;\n    return _this;\n  }\n\n  AdaptiveRetryStrategy.prototype.retry = function (next, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , _super.prototype.retry.call(this, next, args, {\n          beforeRequest: function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.rateLimiter.getSendToken()];\n              });\n            });\n          },\n          afterRequest: function (response) {\n            _this.rateLimiter.updateClientSendingRate(response);\n          }\n        })];\n      });\n    });\n  };\n\n  return AdaptiveRetryStrategy;\n}(StandardRetryStrategy);\n\nexport { AdaptiveRetryStrategy };","map":{"version":3,"sources":["../../src/AdaptiveRetryStrategy.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,UAA5B;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,qBAAT,QAAoE,yBAApE;;AAUA,IAAA,qBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2C,EAAA,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;;AAGzC,WAAA,qBAAA,CAAY,mBAAZ,EAAmD,OAAnD,EAAyF;AAAzF,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,EAAA,GAAmC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW,EAApD;AAAA,QAAQ,WAAW,GAAA,EAAA,CAAA,WAAnB;AAAA,QAAwB,YAAY,GAAA,MAAA,CAAA,EAAA,EAA9B,CAAA,aAAA,CAA8B,CAApC;;AACA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,mBAAN,EAA2B,YAA3B,KAAwC,IAAxC;AACA,IAAA,KAAI,CAAC,WAAL,GAAmB,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAA,WAAA,GAAe,IAAI,kBAAJ,EAAlC;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,WAAW,CAAC,QAAxB;;AACD;;AAEK,EAAA,qBAAA,CAAA,SAAA,CAAA,KAAA,GAAN,UACE,IADF,EAEE,IAFF,EAEuC;;;;;AAErC,eAAA,CAAA;AAAA;AAAA,UAAO,MAAA,CAAA,SAAA,CAAM,KAAN,CAAW,IAAX,CAAW,IAAX,EAAY,IAAZ,EAAkB,IAAlB,EAAwB;AAC7B,UAAA,aAAa,EAAE,YAAA;AAAA,mBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;AACb,uBAAA,CAAA;AAAA;AAAA,kBAAO,KAAK,WAAL,CAAiB,YAAjB,EAAP,CAAA;;aADa,CAAA;AAEd,WAH4B;AAI7B,UAAA,YAAY,EAAE,UAAC,QAAD,EAAc;AAC1B,YAAA,KAAI,CAAC,WAAL,CAAiB,uBAAjB,CAAyC,QAAzC;AACD;AAN4B,SAAxB,CAAP,CAAA;;;AAQD,GAZK;;AAaR,SAAA,qBAAA;AAAC,CAvBD,CAA2C,qBAA3C,CAAA","sourcesContent":["import { FinalizeHandler, FinalizeHandlerArguments, MetadataBearer, Provider } from \"@aws-sdk/types\";\n\nimport { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy, StandardRetryStrategyOptions } from \"./StandardRetryStrategy\";\nimport { RateLimiter } from \"./types\";\n\n/**\n * Strategy options to be passed to AdaptiveRetryStrategy\n */\nexport interface AdaptiveRetryStrategyOptions extends StandardRetryStrategyOptions {\n  rateLimiter?: RateLimiter;\n}\n\nexport class AdaptiveRetryStrategy extends StandardRetryStrategy {\n  private rateLimiter: RateLimiter;\n\n  constructor(maxAttemptsProvider: Provider<number>, options?: AdaptiveRetryStrategyOptions) {\n    const { rateLimiter, ...superOptions } = options ?? {};\n    super(maxAttemptsProvider, superOptions);\n    this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\n    this.mode = RETRY_MODES.ADAPTIVE;\n  }\n\n  async retry<Input extends object, Ouput extends MetadataBearer>(\n    next: FinalizeHandler<Input, Ouput>,\n    args: FinalizeHandlerArguments<Input>\n  ) {\n    return super.retry(next, args, {\n      beforeRequest: async () => {\n        return this.rateLimiter.getSendToken();\n      },\n      afterRequest: (response: any) => {\n        this.rateLimiter.updateClientSendingRate(response);\n      },\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}