{"ast":null,"code":"import { __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nexport var retryMiddleware = function (options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var retryStrategy;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , options.retryStrategy()];\n\n            case 1:\n              retryStrategy = _a.sent();\n              if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode) context.userAgent = __spreadArray(__spreadArray([], __read(context.userAgent || [])), [[\"cfg/retry-mode\", retryStrategy.mode]]);\n              return [2\n              /*return*/\n              , retryStrategy.retry(next, args)];\n          }\n        });\n      });\n    };\n  };\n};\nexport var retryMiddlewareOptions = {\n  name: \"retryMiddleware\",\n  tags: [\"RETRY\"],\n  step: \"finalizeRequest\",\n  priority: \"high\",\n  override: true\n};\nexport var getRetryPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/retryMiddleware.ts"],"names":[],"mappings":";AAaA,OAAO,IAAM,eAAe,GAC1B,UAAC,OAAD,EAA6B;AAC7B,SAAA,UACE,IADF,EAEE,OAFF,EAEkC;AAElC,WAAA,UAAO,IAAP,EAA0C;AAAA,aAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAClB,qBAAA,CAAA;AAAA;AAAA,gBAAM,OAAO,CAAC,aAAR,EAAN,CAAA;;;AAAhB,cAAA,aAAa,GAAG,EAAA,CAAA,IAAA,EAAhB;AACN,kBAAI,aAAa,KAAA,IAAb,IAAA,aAAa,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAA,aAAa,CAAE,IAAnB,EAAyB,OAAO,CAAC,SAAR,GAAiB,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAQ,OAAO,CAAC,SAAR,IAAqB,EAA7B,CAAA,CAAA,EAAgC,CAAE,CAAC,gBAAD,EAAmB,aAAa,CAAC,IAAjC,CAAF,CAAhC,CAAjB;AACzB,qBAAA,CAAA;AAAA;AAAA,gBAAO,aAAa,CAAC,KAAd,CAAoB,IAApB,EAA0B,IAA1B,CAAP,CAAA;;;OAHwC,CAAA;AAIzC,KAJD;AAIC,GARD;AAQC,CAVI;AAYP,OAAO,IAAM,sBAAsB,GAAqD;AACtF,EAAA,IAAI,EAAE,iBADgF;AAEtF,EAAA,IAAI,EAAE,CAAC,OAAD,CAFgF;AAGtF,EAAA,IAAI,EAAE,iBAHgF;AAItF,EAAA,QAAQ,EAAE,MAJ4E;AAKtF,EAAA,QAAQ,EAAE;AAL4E,CAAjF;AAQP,OAAO,IAAM,cAAc,GAAG,UAAC,OAAD,EAA6B;AAA0B,SAAC;AACpF,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,eAAe,CAAC,OAAD,CAA/B,EAA0C,sBAA1C;AACD;AAHmF,GAAD;AAInF,CAJK","sourcesContent":["import {\n  AbsoluteLocation,\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestHandlerOptions,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { RetryResolvedConfig } from \"./configurations\";\n\nexport const retryMiddleware =\n  (options: RetryResolvedConfig) =>\n  <Output extends MetadataBearer = MetadataBearer>(\n    next: FinalizeHandler<any, Output>,\n    context: HandlerExecutionContext\n  ): FinalizeHandler<any, Output> =>\n  async (args: FinalizeHandlerArguments<any>): Promise<FinalizeHandlerOutput<Output>> => {\n    const retryStrategy = await options.retryStrategy();\n    if (retryStrategy?.mode) context.userAgent = [...(context.userAgent || []), [\"cfg/retry-mode\", retryStrategy.mode]];\n    return retryStrategy.retry(next, args);\n  };\n\nexport const retryMiddlewareOptions: FinalizeRequestHandlerOptions & AbsoluteLocation = {\n  name: \"retryMiddleware\",\n  tags: [\"RETRY\"],\n  step: \"finalizeRequest\",\n  priority: \"high\",\n  override: true,\n};\n\nexport const getRetryPlugin = (options: RetryResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}