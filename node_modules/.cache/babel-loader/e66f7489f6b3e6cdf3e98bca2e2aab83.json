{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForPositionCommand } from '@aws-sdk/client-location';\nvar logger = new Logger('AmazonLocationServiceProvider');\n\nvar AmazonLocationServiceProvider =\n/** @class */\nfunction () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n\n\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput.FilterCountries = options.countries;\n              locationServiceInput.MaxResults = options.maxResults;\n\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              if (options['biasPosition']) {\n                locationServiceInput.BiasPosition = options['biasPosition'];\n              } else if (options['searchAreaConstraints']) {\n                locationServiceInput.FilterBBox = options['searchAreaConstraints'];\n              }\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            error_3 = _a.sent();\n            logger.warn('Ensure credentials error. Credentials are:', error_3);\n            return [2\n            /*return*/\n            , false];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create them and ensure to run `amplify push` after\";\n      logger.warn(errorString);\n      throw new Error(errorString);\n    }\n\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and ensure to run `amplify push` after\";\n      logger.warn(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found, please run `amplify add geo` to add one and ensure to run `amplify push` after.';\n      logger.warn(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\n\nexport { AmazonLocationServiceProvider };","map":{"version":3,"sources":["../../src/Providers/AmazonLocationServiceProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWG;;;AACH,OAAO,aAAP,MAA0B,gBAA1B;AACA,SACC,aAAa,IAAI,MADlB,EAEC,WAFD,EAGC,mBAHD,QAIO,mBAJP;AAKA,SAGC,cAHD,EAIC,8BAJD,EAKC,kCALD,QAOO,0BAPP;AAmBA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,+BAAX,CAAf;;AAEA,IAAA,6BAAA;AAAA;AAAA,YAAA;AASC;;;AAGG;AACH,WAAA,6BAAA,CAAY,MAAZ,EAA8B;AAC7B,SAAK,OAAL,GAAe,MAAM,GAAG,MAAH,GAAY,EAAjC;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,aAAb,EAA4B,KAAK,OAAjC;AACA;AAED;;;AAGG;;;AACI,EAAA,6BAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,6BAA6B,CAAC,QAArC;AACA,GAFM;AAIP;;;AAGG;;;AACI,EAAA,6BAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;AACC,WAAO,6BAA6B,CAAC,aAArC;AACA,GAFM;AAIP;;;;AAIG;;;AACI,EAAA,6BAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAAwB;AACvB,IAAA,MAAM,CAAC,KAAP,CAAa,4CAAb,EAA2D,MAA3D;AACA,QAAI,CAAC,MAAL,EAAa,OAAO,KAAK,OAAZ;AACb,SAAK,OAAL,GAAe,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,MAAhC,CAAf;AACA,WAAO,KAAK,OAAZ;AACA,GALM;AAOP;;;AAGG;;;AACI,EAAA,6BAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,YAAA;AACC,SAAK,mBAAL;;AAEA,QAAM,SAAS,GAAoC,EAAnD;AACA,QAAM,aAAa,GAAG,KAAK,OAAL,CAAa,IAAb,CAAkB,KAAxC;AACA,QAAM,MAAM,GAAG,KAAK,OAAL,CAAa,MAA5B;;AAEA,SAAK,IAAM,OAAX,IAAsB,aAAtB,EAAqC;AACpC,UAAM,KAAK,GAAG,aAAa,CAAC,OAAD,CAAb,CAAuB,KAArC;AACA,MAAA,SAAS,CAAC,IAAV,CAAe;AAAE,QAAA,OAAO,EAAA,OAAT;AAAW,QAAA,KAAK,EAAA,KAAhB;AAAkB,QAAA,MAAM,EAAA;AAAxB,OAAf;AACA;;AAED,WAAO,SAAP;AACA,GAbM;AAeP;;;AAGG;;;AACI,EAAA,6BAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACC,SAAK,mBAAL;;AAEA,QAAM,OAAO,GAAG,KAAK,OAAL,CAAa,IAAb,CAAkB,OAAlC;AACA,QAAM,KAAK,GAAG,KAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB,CAAwB,OAAxB,EAAiC,KAA/C;AACA,QAAM,MAAM,GAAG,KAAK,OAAL,CAAa,MAA5B;AAEA,WAAO;AAAE,MAAA,OAAO,EAAA,OAAT;AAAW,MAAA,KAAK,EAAA,KAAhB;AAAkB,MAAA,MAAM,EAAA;AAAxB,KAAP;AACA,GARM;AAUP;;;;;AAKG;;;AACU,EAAA,6BAAA,CAAA,SAAA,CAAA,YAAA,GAAb,UACC,IADD,EAEC,OAFD,EAE8B;;;;;;AAEP,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,EAAN,CAAA;;;AAAhB,YAAA,aAAa,GAAG,EAAA,CAAA,IAAA,EAAhB;;AACN,gBAAI,CAAC,aAAL,EAAoB;AACnB,oBAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACA;;AAED,iBAAK,kBAAL,CAAwB,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,eAAjC;;AAKM,YAAA,oBAAoB,GAAwC;AACjE,cAAA,IAAI,EAAE,IAD2D;AAEjE,cAAA,SAAS,EAAE,KAAK,OAAL,CAAa,cAAb,CAA4B;AAF0B,aAA5D;AAKN;;AAEG;;AACH,gBAAI,OAAJ,EAAa;AACZ,cAAA,oBAAoB,CAAC,eAArB,GAAuC,OAAO,CAAC,SAA/C;AACA,cAAA,oBAAoB,CAAC,UAArB,GAAkC,OAAO,CAAC,UAA1C;;AAEA,kBAAI,OAAO,CAAC,eAAZ,EAA6B;AAC5B,gBAAA,oBAAoB,CAAC,SAArB,GAAiC,OAAO,CAAC,eAAzC;AACA;;AAED,kBAAI,OAAO,CAAC,cAAD,CAAX,EAA6B;AAC5B,gBAAA,oBAAoB,CAAC,YAArB,GAAoC,OAAO,CAAC,cAAD,CAA3C;AACA,eAFD,MAEO,IAAI,OAAO,CAAC,uBAAD,CAAX,EAAsC;AAC5C,gBAAA,oBAAoB,CAAC,UAArB,GAAkC,OAAO,CAAC,uBAAD,CAAzC;AACA;AACD;;AAEK,YAAA,MAAM,GAAG,IAAI,cAAJ,CAAmB;AACjC,cAAA,WAAW,EAAE,KAAK,OAAL,CAAa,WADO;AAEjC,cAAA,MAAM,EAAE,KAAK,OAAL,CAAa,MAFY;AAGjC,cAAA,eAAe,EAAE,mBAAmB;AAHH,aAAnB,CAAT;AAKA,YAAA,OAAO,GAAG,IAAI,8BAAJ,CAAmC,oBAAnC,CAAV;;;;;;AAIM,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,OAAb;AACA,kBAAM,OAAN;;;AAQK,YAAA,aAAa,GAAkB,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CACpC,UAAA,MAAA,EAAM;AAAI,qBAAA,MAAM,CAAN,KAAA;AAAY,aADc,CAA/B;AAGA,YAAA,OAAO,GAAa,aAAa,CAAC,aAAD,EAAgB;AACtD,cAAA,IAAI,EAAE;AADgD,aAAhB,CAAjC;AAIN,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAP,CAAA;;;;AACA,GAjEY;AAmEb;;;;;AAKG;;;AACU,EAAA,6BAAA,CAAA,SAAA,CAAA,mBAAA,GAAb,UACC,WADD,EAEC,OAFD,EAEqC;;;;;;AAEd,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,EAAN,CAAA;;;AAAhB,YAAA,aAAa,GAAG,EAAA,CAAA,IAAA,EAAhB;;AACN,gBAAI,CAAC,aAAL,EAAoB;AACnB,oBAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACA;;AAED,iBAAK,kBAAL,CAAwB,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,eAAjC;;AAEM,YAAA,oBAAoB,GAA4C;AACrE,cAAA,QAAQ,EAAE,WAD2D;AAErE,cAAA,SAAS,EAAE,KAAK,OAAL,CAAa,cAAb,CAA4B;AAF8B,aAAhE;;AAKN,gBAAI,OAAJ,EAAa;AACZ,kBAAI,OAAO,CAAC,eAAZ,EAA6B;AAC5B,gBAAA,oBAAoB,CAAC,SAArB,GAAiC,OAAO,CAAC,eAAzC;AACA;;AACD,cAAA,oBAAoB,CAAC,UAArB,GAAkC,OAAO,CAAC,UAA1C;AACA;;AAEK,YAAA,MAAM,GAAG,IAAI,cAAJ,CAAmB;AACjC,cAAA,WAAW,EAAE,KAAK,OAAL,CAAa,WADO;AAEjC,cAAA,MAAM,EAAE,KAAK,OAAL,CAAa,MAFY;AAGjC,cAAA,eAAe,EAAE,mBAAmB;AAHH,aAAnB,CAAT;AAKA,YAAA,OAAO,GAAG,IAAI,kCAAJ,CACf,oBADe,CAAV;;;;;;AAMM,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,OAAb;AACA,kBAAM,OAAN;;;AAQK,YAAA,aAAa,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,UAAA,MAAA,EAAM;AAAI,qBAAA,MAAM,CAAN,KAAA;AAAY,aAA3C,CAAhB;AACA,YAAA,OAAO,GAAW,aAAa,CAAC,aAAa,CAAC,CAAD,CAAd,EAAmB;AACvD,cAAA,IAAI,EAAE;AADiD,aAAnB,CAA/B;AAIN,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAP,CAAA;;;;AACA,GAnDY;AAqDb;;AAEG;;;AACW,EAAA,6BAAA,CAAA,SAAA,CAAA,kBAAA,GAAd,YAAA;;;;;;;;AAEsB,mBAAA,CAAA;AAAA;AAAA,cAAM,WAAW,CAAC,GAAZ,EAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;AACN,gBAAI,CAAC,WAAL,EAAkB,OAAA,CAAA;AAAA;AAAA,cAAO,KAAP,CAAA;AACZ,YAAA,IAAI,GAAG,WAAW,CAAC,KAAZ,CAAkB,WAAlB,CAAP;AACN,YAAA,MAAM,CAAC,KAAP,CAAa,+CAAb,EAA8D,IAA9D;AACA,iBAAK,OAAL,CAAa,WAAb,GAA2B,IAA3B;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAP,CAAA;;;;AAEA,YAAA,MAAM,CAAC,IAAP,CAAY,4CAAZ,EAA0D,OAA1D;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAP,CAAA;;;;;;;;;AAED,GAZa;;AAcN,EAAA,6BAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,YAAA;AACC,QAAI,CAAC,KAAK,OAAL,CAAa,IAAlB,EAAwB;AACvB,UAAM,WAAW,GAChB,uHADD;AAEA,MAAA,MAAM,CAAC,IAAP,CAAY,WAAZ;AACA,YAAM,IAAI,KAAJ,CAAU,WAAV,CAAN;AACA;;AACD,QAAI,CAAC,KAAK,OAAL,CAAa,IAAb,CAAkB,OAAvB,EAAgC;AAC/B,UAAM,WAAW,GAChB,6HADD;AAEA,MAAA,MAAM,CAAC,IAAP,CAAY,WAAZ;AACA,YAAM,IAAI,KAAJ,CAAU,WAAV,CAAN;AACA;AACD,GAbO;;AAeA,EAAA,6BAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,UAA2B,mBAA3B,EAAuD;AACtD,QACC,CAAC,CAAC,KAAK,OAAL,CAAa,cAAd,IAAgC,CAAC,KAAK,OAAL,CAAa,cAAb,CAA4B,OAA9D,KACA,CAAC,mBAFF,EAGE;AACD,UAAM,WAAW,GAChB,wGADD;AAEA,MAAA,MAAM,CAAC,IAAP,CAAY,WAAZ;AACA,YAAM,IAAI,KAAJ,CAAU,WAAV,CAAN;AACA;AACD,GAVO;;AAlPD,EAAA,6BAAA,CAAA,QAAA,GAAW,KAAX;AACA,EAAA,6BAAA,CAAA,aAAA,GAAgB,uBAAhB;AA4PR,SAAA,6BAAA;AAAC,CA9PD,EAAA;;SAAa,6B","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForPositionCommand, } from '@aws-sdk/client-location';\nvar logger = new Logger('AmazonLocationServiceProvider');\nvar AmazonLocationServiceProvider = /** @class */ (function () {\n    /**\n     * Initialize Geo with AWS configurations\n     * @param {Object} config - Configuration object for Geo\n     */\n    function AmazonLocationServiceProvider(config) {\n        this._config = config ? config : {};\n        logger.debug('Geo Options', this._config);\n    }\n    /**\n     * get the category of the plugin\n     * @returns {string} name of the category\n     */\n    AmazonLocationServiceProvider.prototype.getCategory = function () {\n        return AmazonLocationServiceProvider.CATEGORY;\n    };\n    /**\n     * get provider name of the plugin\n     * @returns {string} name of the provider\n     */\n    AmazonLocationServiceProvider.prototype.getProviderName = function () {\n        return AmazonLocationServiceProvider.PROVIDER_NAME;\n    };\n    /**\n     * Configure Geo part with aws configuration\n     * @param {Object} config - Configuration of the Geo\n     * @return {Object} - Current configuration\n     */\n    AmazonLocationServiceProvider.prototype.configure = function (config) {\n        logger.debug('configure Amazon Location Service Provider', config);\n        if (!config)\n            return this._config;\n        this._config = Object.assign({}, this._config, config);\n        return this._config;\n    };\n    /**\n     * Get the map resources that are currently available through the provider\n     * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n     */\n    AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n        this._verifyMapResources();\n        var mapStyles = [];\n        var availableMaps = this._config.maps.items;\n        var region = this._config.region;\n        for (var mapName in availableMaps) {\n            var style = availableMaps[mapName].style;\n            mapStyles.push({ mapName: mapName, style: style, region: region });\n        }\n        return mapStyles;\n    };\n    /**\n     * Get the map resource set as default in amplify config\n     * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n     */\n    AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n        this._verifyMapResources();\n        var mapName = this._config.maps.default;\n        var style = this._config.maps.items[mapName].style;\n        var region = this._config.region;\n        return { mapName: mapName, style: style, region: region };\n    };\n    /**\n     * Search by text input with optional parameters\n     * @param  {string} text - The text string that is to be searched for\n     * @param  {SearchByTextOptions} options? - Optional parameters to the search\n     * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n     */\n    AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Text: text,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        /**\n                         * Map search options to Amazon Location Service input object\n                         */\n                        if (options) {\n                            locationServiceInput.FilterCountries = options.countries;\n                            locationServiceInput.MaxResults = options.maxResults;\n                            if (options.searchIndexName) {\n                                locationServiceInput.IndexName = options.searchIndexName;\n                            }\n                            if (options['biasPosition']) {\n                                locationServiceInput.BiasPosition = options['biasPosition'];\n                            }\n                            else if (options['searchAreaConstraints']) {\n                                locationServiceInput.FilterBBox = options['searchAreaConstraints'];\n                            }\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        logger.debug(error_1);\n                        throw error_1;\n                    case 5:\n                        PascalResults = response.Results.map(function (result) { return result.Place; });\n                        results = camelcaseKeys(PascalResults, {\n                            deep: true,\n                        });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Reverse geocoding search via a coordinate point on the map\n     * @param coordinates - Coordinates array for the search input\n     * @param options - Options parameters for the search\n     * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n     */\n    AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_2, PascalResults, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Position: coordinates,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        if (options) {\n                            if (options.searchIndexName) {\n                                locationServiceInput.IndexName = options.searchIndexName;\n                            }\n                            locationServiceInput.MaxResults = options.maxResults;\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_2 = _a.sent();\n                        logger.debug(error_2);\n                        throw error_2;\n                    case 5:\n                        PascalResults = response.Results.map(function (result) { return result.Place; });\n                        results = camelcaseKeys(PascalResults[0], {\n                            deep: true,\n                        });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, cred, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials)\n                            return [2 /*return*/, false];\n                        cred = Credentials.shear(credentials);\n                        logger.debug('Set credentials for storage. Credentials are:', cred);\n                        this._config.credentials = cred;\n                        return [2 /*return*/, true];\n                    case 2:\n                        error_3 = _a.sent();\n                        logger.warn('Ensure credentials error. Credentials are:', error_3);\n                        return [2 /*return*/, false];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n        if (!this._config.maps) {\n            var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create them and ensure to run `amplify push` after\";\n            logger.warn(errorString);\n            throw new Error(errorString);\n        }\n        if (!this._config.maps.default) {\n            var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and ensure to run `amplify push` after\";\n            logger.warn(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n        if ((!this._config.search_indices || !this._config.search_indices.default) &&\n            !optionalSearchIndex) {\n            var errorString = 'No Search Index found, please run `amplify add geo` to add one and ensure to run `amplify push` after.';\n            logger.warn(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.CATEGORY = 'Geo';\n    AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n    return AmazonLocationServiceProvider;\n}());\nexport { AmazonLocationServiceProvider };\n//# sourceMappingURL=AmazonLocationServiceProvider.js.map"]},"metadata":{},"sourceType":"module"}