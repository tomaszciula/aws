{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\n\nvar AWSS3ProviderManagedUpload =\n/** @class */\nfunction () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    // Defaults\n    this.minPartSize = 5 * 1024 * 1024; // in MB\n\n    this.queueSize = 4; // Data for current upload\n\n    this.body = null;\n    this.params = null;\n    this.opts = null;\n    this.completedParts = [];\n    this.cancel = false; // Progress reporting\n\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n    this.s3client = this._createNewS3Client(opts, emitter);\n  }\n\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, putObjectCommand, uploadId, numberOfPartsToUpload, parts, start;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this.validateAndSanitizeBody(this.params.Body)];\n\n          case 1:\n            _a.body = _b.sent();\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3\n            /*break*/\n            , 2]; // Multipart upload is not required. Upload the sanitized body as is\n\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [2\n            /*return*/\n            , this.s3client.send(putObjectCommand)];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.createMultiPartUpload()];\n\n          case 3:\n            uploadId = _b.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n            parts = this.createParts();\n            start = 0;\n            _b.label = 4;\n\n          case 4:\n            if (!(start < numberOfPartsToUpload)) return [3\n            /*break*/\n            , 9];\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n\n            return [4\n            /*yield*/\n            , this.checkIfUploadCancelled(uploadId)];\n\n          case 5:\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n            _b.sent(); // Upload as many as `queueSize` parts simultaneously\n\n\n            return [4\n            /*yield*/\n            , this.uploadParts(uploadId, parts.slice(start, start + this.queueSize))];\n\n          case 6:\n            // Upload as many as `queueSize` parts simultaneously\n            _b.sent();\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n\n\n            return [4\n            /*yield*/\n            , this.checkIfUploadCancelled(uploadId)];\n\n          case 7:\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n            _b.sent();\n\n            _b.label = 8;\n\n          case 8:\n            start += this.queueSize;\n            return [3\n            /*break*/\n            , 4];\n\n          case 9:\n            parts.map(function (part) {\n              _this.removeEventListener(part);\n            });\n            return [4\n            /*yield*/\n            , this.finishMultiPartUpload(uploadId)];\n\n          case 10:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createParts = function () {\n    var parts = [];\n\n    for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n      var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n      parts.push({\n        bodyPart: this.body.slice(bodyStart, bodyEnd),\n        partNumber: parts.length + 1,\n        emitter: new events.EventEmitter(),\n        _lastUploadedBytes: 0\n      });\n      bodyStart += this.minPartSize;\n    }\n\n    return parts;\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4\n            /*yield*/\n            , this.s3client.send(createMultiPartUploadCommand)];\n\n          case 1:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2\n            /*return*/\n            , response.UploadId];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n\n\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allResults, i, error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Promise.all(parts.map(function (part) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      this.setupEventListener(part);\n                      options = {\n                        emitter: part.emitter\n                      };\n                      _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                      return [4\n                      /*yield*/\n                      , this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({\n                        PartNumber: part.partNumber,\n                        Body: part.bodyPart,\n                        UploadId: uploadId,\n                        Key: Key,\n                        Bucket: Bucket\n                      }, SSECustomerAlgorithm && {\n                        SSECustomerAlgorithm: SSECustomerAlgorithm\n                      }), SSECustomerKey && {\n                        SSECustomerKey: SSECustomerKey\n                      }), SSECustomerKeyMD5 && {\n                        SSECustomerKeyMD5: SSECustomerKeyMD5\n                      })), options)];\n\n                    case 1:\n                      res = _b.sent();\n                      return [2\n                      /*return*/\n                      , res];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            allResults = _a.sent(); // The order of resolved promises is the same as input promise order.\n\n            for (i = 0; i < allResults.length; i++) {\n              this.completedParts.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_1 = _a.sent();\n            logger.error('error happened while uploading a part. Cancelling the multipart upload', error_1);\n            this.cancelUpload();\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, data, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.completedParts\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.s3client.send(completeUploadCommand)];\n\n          case 2:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data.Key];\n\n          case 3:\n            error_2 = _a.sent();\n            logger.error('error happened while finishing the upload. Cancelling the multipart upload', error_2);\n            this.cancelUpload();\n            return [2\n            /*return*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errorMessage, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.cancel) return [3\n            /*break*/\n            , 5];\n            errorMessage = 'Upload was cancelled.';\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.cleanup(uploadId)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_3 = _a.sent();\n            errorMessage += \" \" + error_3.message;\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            throw new Error(errorMessage);\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cancelUpload = function () {\n    this.cancel = true;\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4\n            /*yield*/\n            , this.s3client.send(new AbortMultipartUploadCommand(input))];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.s3client.send(new ListPartsCommand(input))];\n\n          case 2:\n            data = _a.sent();\n\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multi Part upload clean up failed');\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n    part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n    part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n  };\n\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n\n    part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.isGenericObject(body)) {\n          // Any javascript object\n          return [2\n          /*return*/\n          , JSON.stringify(body)];\n        } else {\n          // Files, arrayBuffer etc\n          return [2\n          /*return*/\n          , body];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n\n  return AWSS3ProviderManagedUpload;\n}();\n\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"sources":["../../src/providers/AWSS3ProviderManagedUpload.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand, } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT, } from './axios-http-handler';\nimport * as events from 'events';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client, } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar AWSS3ProviderManagedUpload = /** @class */ (function () {\n    function AWSS3ProviderManagedUpload(params, opts, emitter) {\n        // Defaults\n        this.minPartSize = 5 * 1024 * 1024; // in MB\n        this.queueSize = 4;\n        // Data for current upload\n        this.body = null;\n        this.params = null;\n        this.opts = null;\n        this.completedParts = [];\n        this.cancel = false;\n        // Progress reporting\n        this.bytesUploaded = 0;\n        this.totalBytesToUpload = 0;\n        this.emitter = null;\n        this.params = params;\n        this.opts = opts;\n        this.emitter = emitter;\n        this.s3client = this._createNewS3Client(opts, emitter);\n    }\n    AWSS3ProviderManagedUpload.prototype.upload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, putObjectCommand, uploadId, numberOfPartsToUpload, parts, start;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this.validateAndSanitizeBody(this.params.Body)];\n                    case 1:\n                        _a.body = _b.sent();\n                        this.totalBytesToUpload = this.byteLength(this.body);\n                        if (!(this.totalBytesToUpload <= this.minPartSize)) return [3 /*break*/, 2];\n                        // Multipart upload is not required. Upload the sanitized body as is\n                        this.params.Body = this.body;\n                        putObjectCommand = new PutObjectCommand(this.params);\n                        return [2 /*return*/, this.s3client.send(putObjectCommand)];\n                    case 2: return [4 /*yield*/, this.createMultiPartUpload()];\n                    case 3:\n                        uploadId = _b.sent();\n                        numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n                        parts = this.createParts();\n                        start = 0;\n                        _b.label = 4;\n                    case 4:\n                        if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 9];\n                        /** This first block will try to cancel the upload if the cancel\n                         *\trequest came before any parts uploads have started.\n                         **/\n                        return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n                    case 5:\n                        /** This first block will try to cancel the upload if the cancel\n                         *\trequest came before any parts uploads have started.\n                         **/\n                        _b.sent();\n                        // Upload as many as `queueSize` parts simultaneously\n                        return [4 /*yield*/, this.uploadParts(uploadId, parts.slice(start, start + this.queueSize))];\n                    case 6:\n                        // Upload as many as `queueSize` parts simultaneously\n                        _b.sent();\n                        /** Call cleanup a second time in case there were part upload requests\n                         *  in flight. This is to ensure that all parts are cleaned up.\n                         */\n                        return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n                    case 7:\n                        /** Call cleanup a second time in case there were part upload requests\n                         *  in flight. This is to ensure that all parts are cleaned up.\n                         */\n                        _b.sent();\n                        _b.label = 8;\n                    case 8:\n                        start += this.queueSize;\n                        return [3 /*break*/, 4];\n                    case 9:\n                        parts.map(function (part) {\n                            _this.removeEventListener(part);\n                        });\n                        return [4 /*yield*/, this.finishMultiPartUpload(uploadId)];\n                    case 10: \n                    // Step 3: Finalize the upload such that S3 can recreate the file\n                    return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.createParts = function () {\n        var parts = [];\n        for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n            var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n            parts.push({\n                bodyPart: this.body.slice(bodyStart, bodyEnd),\n                partNumber: parts.length + 1,\n                emitter: new events.EventEmitter(),\n                _lastUploadedBytes: 0,\n            });\n            bodyStart += this.minPartSize;\n        }\n        return parts;\n    };\n    AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var createMultiPartUploadCommand, response;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n                        return [4 /*yield*/, this.s3client.send(createMultiPartUploadCommand)];\n                    case 1:\n                        response = _a.sent();\n                        logger.debug(response.UploadId);\n                        return [2 /*return*/, response.UploadId];\n                }\n            });\n        });\n    };\n    /**\n     * @private Not to be extended outside of tests\n     * @VisibleFotTesting\n     */\n    AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var allResults, i, error_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, Promise.all(parts.map(function (part) { return __awaiter(_this, void 0, void 0, function () {\n                                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            this.setupEventListener(part);\n                                            options = { emitter: part.emitter };\n                                            _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                                            return [4 /*yield*/, this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({ PartNumber: part.partNumber, Body: part.bodyPart, UploadId: uploadId, Key: Key,\n                                                    Bucket: Bucket }, (SSECustomerAlgorithm && { SSECustomerAlgorithm: SSECustomerAlgorithm })), (SSECustomerKey && { SSECustomerKey: SSECustomerKey })), (SSECustomerKeyMD5 && { SSECustomerKeyMD5: SSECustomerKeyMD5 }))), options)];\n                                        case 1:\n                                            res = _b.sent();\n                                            return [2 /*return*/, res];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        allResults = _a.sent();\n                        // The order of resolved promises is the same as input promise order.\n                        for (i = 0; i < allResults.length; i++) {\n                            this.completedParts.push({\n                                PartNumber: parts[i].partNumber,\n                                ETag: allResults[i].ETag,\n                            });\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_1 = _a.sent();\n                        logger.error('error happened while uploading a part. Cancelling the multipart upload', error_1);\n                        this.cancelUpload();\n                        return [2 /*return*/];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var input, completeUploadCommand, data, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        input = {\n                            Bucket: this.params.Bucket,\n                            Key: this.params.Key,\n                            UploadId: uploadId,\n                            MultipartUpload: { Parts: this.completedParts },\n                        };\n                        completeUploadCommand = new CompleteMultipartUploadCommand(input);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.s3client.send(completeUploadCommand)];\n                    case 2:\n                        data = _a.sent();\n                        return [2 /*return*/, data.Key];\n                    case 3:\n                        error_2 = _a.sent();\n                        logger.error('error happened while finishing the upload. Cancelling the multipart upload', error_2);\n                        this.cancelUpload();\n                        return [2 /*return*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorMessage, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.cancel) return [3 /*break*/, 5];\n                        errorMessage = 'Upload was cancelled.';\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.cleanup(uploadId)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_3 = _a.sent();\n                        errorMessage += \" \" + error_3.message;\n                        return [3 /*break*/, 4];\n                    case 4: throw new Error(errorMessage);\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.cancelUpload = function () {\n        this.cancel = true;\n    };\n    AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var input, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Reset this's state\n                        this.body = null;\n                        this.completedParts = [];\n                        this.bytesUploaded = 0;\n                        this.totalBytesToUpload = 0;\n                        input = {\n                            Bucket: this.params.Bucket,\n                            Key: this.params.Key,\n                            UploadId: uploadId,\n                        };\n                        return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand(input))];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.s3client.send(new ListPartsCommand(input))];\n                    case 2:\n                        data = _a.sent();\n                        if (data && data.Parts && data.Parts.length > 0) {\n                            throw new Error('Multi Part upload clean up failed');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n        part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n        part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n    };\n    AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n        var _this = this;\n        part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n            _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n            part._lastUploadedBytes = progress.loaded;\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n        this.bytesUploaded += incrementalUpdate;\n        this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n            loaded: this.bytesUploaded,\n            total: this.totalBytesToUpload,\n            part: partNumber,\n            key: this.params.Key,\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n        if (input === null || input === undefined)\n            return 0;\n        if (typeof input.byteLength === 'number') {\n            return input.byteLength;\n        }\n        else if (typeof input.length === 'number') {\n            return input.length;\n        }\n        else if (typeof input.size === 'number') {\n            return input.size;\n        }\n        else if (typeof input.path === 'string') {\n            /* NodeJs Support\n            return require('fs').lstatSync(input.path).size;\n            */\n        }\n        else {\n            throw new Error('Cannot determine length of ' + input);\n        }\n    };\n    AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (this.isGenericObject(body)) {\n                    // Any javascript object\n                    return [2 /*return*/, JSON.stringify(body)];\n                }\n                else {\n                    // Files, arrayBuffer etc\n                    return [2 /*return*/, body];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n        if (body !== null && typeof body === 'object') {\n            try {\n                return !(this.byteLength(body) >= 0);\n            }\n            catch (error) {\n                // If we cannot determine the length of the body, consider it\n                // as a generic object and upload a stringified version of it\n                return true;\n            }\n        }\n        return false;\n    };\n    AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n        var s3client = createS3Client(config, emitter);\n        s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n        s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n        return s3client;\n    };\n    return AWSS3ProviderManagedUpload;\n}());\nexport { AWSS3ProviderManagedUpload };\n//# sourceMappingURL=AWSS3ProviderManagedUpload.js.map"]},"metadata":{},"sourceType":"module"}