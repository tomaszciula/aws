{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { AdaptiveRetryStrategy } from \"./AdaptiveRetryStrategy\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES } from \"./config\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: function (env) {\n    var value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Environment variable \" + ENV_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n\n    return maxAttempt;\n  },\n  configFileSelector: function (profile) {\n    var value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Shared config file entry \" + CONFIG_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport var resolveRetryConfig = function (input) {\n  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return __assign(__assign({}, input), {\n    maxAttempts: maxAttempts,\n    retryStrategy: function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var retryMode, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (input.retryStrategy) {\n                return [2\n                /*return*/\n                , input.retryStrategy];\n              }\n\n              _a = input.retryMode;\n              if (_a) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , input.retryModeProvider()];\n\n            case 1:\n              _a = _b.sent();\n              _b.label = 2;\n\n            case 2:\n              retryMode = _a;\n\n              if (retryMode === RETRY_MODES.ADAPTIVE) {\n                return [2\n                /*return*/\n                , new AdaptiveRetryStrategy(maxAttempts)];\n              }\n\n              return [2\n              /*return*/\n              , new StandardRetryStrategy(maxAttempts)];\n          }\n        });\n      });\n    }\n  });\n};\n\nvar normalizeMaxAttempts = function (maxAttempts) {\n  if (maxAttempts === void 0) {\n    maxAttempts = DEFAULT_MAX_ATTEMPTS;\n  }\n\n  if (typeof maxAttempts === \"number\") {\n    var promisified_1 = Promise.resolve(maxAttempts);\n    return function () {\n      return promisified_1;\n    };\n  }\n\n  return maxAttempts;\n};\n\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: function (env) {\n    return env[ENV_RETRY_MODE];\n  },\n  configFileSelector: function (profile) {\n    return profile[CONFIG_RETRY_MODE];\n  },\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"sources":["../../src/configurations.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoadedConfigSelectors } from \"@aws-sdk/node-config-provider\";\nimport { Provider, RetryStrategy } from \"@aws-sdk/types\";\n\nimport { AdaptiveRetryStrategy } from \"./AdaptiveRetryStrategy\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES } from \"./config\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\n\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\n\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS: LoadedConfigSelectors<number> = {\n  environmentVariableSelector: (env) => {\n    const value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  configFileSelector: (profile) => {\n    const value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS,\n};\n\nexport interface RetryInputConfig {\n  /**\n   * The maximum number of times requests that encounter retryable failures should be attempted.\n   */\n  maxAttempts?: number | Provider<number>;\n  /**\n   * The strategy to retry the request. Using built-in exponential backoff strategy by default.\n   */\n  retryStrategy?: RetryStrategy;\n  /**\n   * Specifies which retry algorithm to use.\n   */\n  retryMode?: string;\n}\n\ninterface PreviouslyResolved {\n  /**\n   * Specifies provider for retry algorithm to use.\n   * @internal\n   */\n  retryModeProvider: Provider<string>;\n}\n\nexport interface RetryResolvedConfig {\n  /**\n   * Resolved value for input config {@link RetryInputConfig.maxAttempts}\n   */\n  maxAttempts: Provider<number>;\n  /**\n   * Resolved value for input config {@link RetryInputConfig.retryStrategy}\n   */\n  retryStrategy: Provider<RetryStrategy>;\n}\n\nexport const resolveRetryConfig = <T>(input: T & PreviouslyResolved & RetryInputConfig): T & RetryResolvedConfig => {\n  const maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return {\n    ...input,\n    maxAttempts,\n    retryStrategy: async () => {\n      if (input.retryStrategy) {\n        return input.retryStrategy;\n      }\n      const retryMode = input.retryMode || (await input.retryModeProvider());\n      if (retryMode === RETRY_MODES.ADAPTIVE) {\n        return new AdaptiveRetryStrategy(maxAttempts);\n      }\n      return new StandardRetryStrategy(maxAttempts);\n    },\n  };\n};\n\nconst normalizeMaxAttempts = (maxAttempts: number | Provider<number> = DEFAULT_MAX_ATTEMPTS): Provider<number> => {\n  if (typeof maxAttempts === \"number\") {\n    const promisified = Promise.resolve(maxAttempts);\n    return () => promisified;\n  }\n  return maxAttempts;\n};\n\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\n\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS: LoadedConfigSelectors<string> = {\n  environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n  configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n  default: DEFAULT_RETRY_MODE,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}