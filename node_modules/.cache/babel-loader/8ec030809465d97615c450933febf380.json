{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { HttpRequest as __HttpRequest, isValidHostname as __isValidHostname } from \"@aws-sdk/protocol-http\";\nimport { expectNumber as __expectNumber, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, handleFloat as __handleFloat, serializeFloat as __serializeFloat } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1AssociateTrackerConsumerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/consumers\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.ConsumerArn !== undefined && input.ConsumerArn !== null && {\n            ConsumerArn: input.ConsumerArn\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchDeleteDevicePositionHistoryCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/delete-positions\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.DeviceIds !== undefined && input.DeviceIds !== null && {\n            DeviceIds: serializeAws_restJson1DeviceIdsList(input.DeviceIds, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchDeleteGeofenceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/delete-geofences\";\n\n          if (input.CollectionName !== undefined) {\n            labelValue = input.CollectionName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.GeofenceIds !== undefined && input.GeofenceIds !== null && {\n            GeofenceIds: serializeAws_restJson1IdList(input.GeofenceIds, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchEvaluateGeofencesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/positions\";\n\n          if (input.CollectionName !== undefined) {\n            labelValue = input.CollectionName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.DevicePositionUpdates !== undefined && input.DevicePositionUpdates !== null && {\n            DevicePositionUpdates: serializeAws_restJson1DevicePositionUpdateList(input.DevicePositionUpdates, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchGetDevicePositionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/get-positions\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.DeviceIds !== undefined && input.DeviceIds !== null && {\n            DeviceIds: serializeAws_restJson1IdList(input.DeviceIds, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchPutGeofenceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/put-geofences\";\n\n          if (input.CollectionName !== undefined) {\n            labelValue = input.CollectionName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.Entries !== undefined && input.Entries !== null && {\n            Entries: serializeAws_restJson1BatchPutGeofenceRequestEntryList(input.Entries, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchUpdateDevicePositionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/positions\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.Updates !== undefined && input.Updates !== null && {\n            Updates: serializeAws_restJson1DevicePositionUpdateList(input.Updates, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CalculateRouteCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}/calculate/route\";\n\n          if (input.CalculatorName !== undefined) {\n            labelValue = input.CalculatorName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CalculatorName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CalculatorName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CalculatorName.\");\n          }\n\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.CarModeOptions !== undefined && input.CarModeOptions !== null && {\n            CarModeOptions: serializeAws_restJson1CalculateRouteCarModeOptions(input.CarModeOptions, context)\n          }), input.DepartNow !== undefined && input.DepartNow !== null && {\n            DepartNow: input.DepartNow\n          }), input.DeparturePosition !== undefined && input.DeparturePosition !== null && {\n            DeparturePosition: serializeAws_restJson1Position(input.DeparturePosition, context)\n          }), input.DepartureTime !== undefined && input.DepartureTime !== null && {\n            DepartureTime: input.DepartureTime.toISOString().split(\".\")[0] + \"Z\"\n          }), input.DestinationPosition !== undefined && input.DestinationPosition !== null && {\n            DestinationPosition: serializeAws_restJson1Position(input.DestinationPosition, context)\n          }), input.DistanceUnit !== undefined && input.DistanceUnit !== null && {\n            DistanceUnit: input.DistanceUnit\n          }), input.IncludeLegGeometry !== undefined && input.IncludeLegGeometry !== null && {\n            IncludeLegGeometry: input.IncludeLegGeometry\n          }), input.TravelMode !== undefined && input.TravelMode !== null && {\n            TravelMode: input.TravelMode\n          }), input.TruckModeOptions !== undefined && input.TruckModeOptions !== null && {\n            TruckModeOptions: serializeAws_restJson1CalculateRouteTruckModeOptions(input.TruckModeOptions, context)\n          }), input.WaypointPositions !== undefined && input.WaypointPositions !== null && {\n            WaypointPositions: serializeAws_restJson1WaypointPositionList(input.WaypointPositions, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreateGeofenceCollectionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, input.CollectionName !== undefined && input.CollectionName !== null && {\n            CollectionName: input.CollectionName\n          }), input.Description !== undefined && input.Description !== null && {\n            Description: input.Description\n          }), input.KmsKeyId !== undefined && input.KmsKeyId !== null && {\n            KmsKeyId: input.KmsKeyId\n          }), input.PricingPlan !== undefined && input.PricingPlan !== null && {\n            PricingPlan: input.PricingPlan\n          }), input.PricingPlanDataSource !== undefined && input.PricingPlanDataSource !== null && {\n            PricingPlanDataSource: input.PricingPlanDataSource\n          }), input.Tags !== undefined && input.Tags !== null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreateMapCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, input.Configuration !== undefined && input.Configuration !== null && {\n            Configuration: serializeAws_restJson1MapConfiguration(input.Configuration, context)\n          }), input.Description !== undefined && input.Description !== null && {\n            Description: input.Description\n          }), input.MapName !== undefined && input.MapName !== null && {\n            MapName: input.MapName\n          }), input.PricingPlan !== undefined && input.PricingPlan !== null && {\n            PricingPlan: input.PricingPlan\n          }), input.Tags !== undefined && input.Tags !== null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreatePlaceIndexCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, input.DataSource !== undefined && input.DataSource !== null && {\n            DataSource: input.DataSource\n          }), input.DataSourceConfiguration !== undefined && input.DataSourceConfiguration !== null && {\n            DataSourceConfiguration: serializeAws_restJson1DataSourceConfiguration(input.DataSourceConfiguration, context)\n          }), input.Description !== undefined && input.Description !== null && {\n            Description: input.Description\n          }), input.IndexName !== undefined && input.IndexName !== null && {\n            IndexName: input.IndexName\n          }), input.PricingPlan !== undefined && input.PricingPlan !== null && {\n            PricingPlan: input.PricingPlan\n          }), input.Tags !== undefined && input.Tags !== null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreateRouteCalculatorCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, input.CalculatorName !== undefined && input.CalculatorName !== null && {\n            CalculatorName: input.CalculatorName\n          }), input.DataSource !== undefined && input.DataSource !== null && {\n            DataSource: input.DataSource\n          }), input.Description !== undefined && input.Description !== null && {\n            Description: input.Description\n          }), input.PricingPlan !== undefined && input.PricingPlan !== null && {\n            PricingPlan: input.PricingPlan\n          }), input.Tags !== undefined && input.Tags !== null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreateTrackerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Description !== undefined && input.Description !== null && {\n            Description: input.Description\n          }), input.KmsKeyId !== undefined && input.KmsKeyId !== null && {\n            KmsKeyId: input.KmsKeyId\n          }), input.PricingPlan !== undefined && input.PricingPlan !== null && {\n            PricingPlan: input.PricingPlan\n          }), input.PricingPlanDataSource !== undefined && input.PricingPlanDataSource !== null && {\n            PricingPlanDataSource: input.PricingPlanDataSource\n          }), input.Tags !== undefined && input.Tags !== null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }), input.TrackerName !== undefined && input.TrackerName !== null && {\n            TrackerName: input.TrackerName\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeleteGeofenceCollectionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}\";\n\n          if (input.CollectionName !== undefined) {\n            labelValue = input.CollectionName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeleteMapCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}\";\n\n          if (input.MapName !== undefined) {\n            labelValue = input.MapName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: MapName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeletePlaceIndexCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}\";\n\n          if (input.IndexName !== undefined) {\n            labelValue = input.IndexName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: IndexName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{IndexName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: IndexName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeleteRouteCalculatorCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}\";\n\n          if (input.CalculatorName !== undefined) {\n            labelValue = input.CalculatorName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CalculatorName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CalculatorName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CalculatorName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeleteTrackerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeGeofenceCollectionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}\";\n\n          if (input.CollectionName !== undefined) {\n            labelValue = input.CollectionName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeMapCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}\";\n\n          if (input.MapName !== undefined) {\n            labelValue = input.MapName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: MapName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribePlaceIndexCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}\";\n\n          if (input.IndexName !== undefined) {\n            labelValue = input.IndexName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: IndexName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{IndexName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: IndexName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeRouteCalculatorCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}\";\n\n          if (input.CalculatorName !== undefined) {\n            labelValue = input.CalculatorName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CalculatorName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CalculatorName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CalculatorName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeTrackerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DisassociateTrackerConsumerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/consumers/{ConsumerArn}\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          if (input.ConsumerArn !== undefined) {\n            labelValue = input.ConsumerArn;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: ConsumerArn.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{ConsumerArn}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: ConsumerArn.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetDevicePositionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/positions/latest\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          if (input.DeviceId !== undefined) {\n            labelValue = input.DeviceId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: DeviceId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{DeviceId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: DeviceId.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetDevicePositionHistoryCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/list-positions\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          if (input.DeviceId !== undefined) {\n            labelValue = input.DeviceId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: DeviceId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{DeviceId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: DeviceId.\");\n          }\n\n          body = JSON.stringify(__assign(__assign(__assign({}, input.EndTimeExclusive !== undefined && input.EndTimeExclusive !== null && {\n            EndTimeExclusive: input.EndTimeExclusive.toISOString().split(\".\")[0] + \"Z\"\n          }), input.NextToken !== undefined && input.NextToken !== null && {\n            NextToken: input.NextToken\n          }), input.StartTimeInclusive !== undefined && input.StartTimeInclusive !== null && {\n            StartTimeInclusive: input.StartTimeInclusive.toISOString().split(\".\")[0] + \"Z\"\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetGeofenceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}\";\n\n          if (input.CollectionName !== undefined) {\n            labelValue = input.CollectionName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n          }\n\n          if (input.GeofenceId !== undefined) {\n            labelValue = input.GeofenceId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: GeofenceId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{GeofenceId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: GeofenceId.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetMapGlyphsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/glyphs/{FontStack}/{FontUnicodeRange}\";\n\n          if (input.MapName !== undefined) {\n            labelValue = input.MapName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: MapName.\");\n          }\n\n          if (input.FontStack !== undefined) {\n            labelValue = input.FontStack;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: FontStack.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{FontStack}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: FontStack.\");\n          }\n\n          if (input.FontUnicodeRange !== undefined) {\n            labelValue = input.FontUnicodeRange;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: FontUnicodeRange.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{FontUnicodeRange}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: FontUnicodeRange.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetMapSpritesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/sprites/{FileName}\";\n\n          if (input.MapName !== undefined) {\n            labelValue = input.MapName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: MapName.\");\n          }\n\n          if (input.FileName !== undefined) {\n            labelValue = input.FileName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: FileName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{FileName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: FileName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetMapStyleDescriptorCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/style-descriptor\";\n\n          if (input.MapName !== undefined) {\n            labelValue = input.MapName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: MapName.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetMapTileCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, labelValue, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/tiles/{Z}/{X}/{Y}\";\n\n          if (input.MapName !== undefined) {\n            labelValue = input.MapName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: MapName.\");\n          }\n\n          if (input.Z !== undefined) {\n            labelValue = input.Z;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Z.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Z}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Z.\");\n          }\n\n          if (input.X !== undefined) {\n            labelValue = input.X;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: X.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{X}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: X.\");\n          }\n\n          if (input.Y !== undefined) {\n            labelValue = input.Y;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Y.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Y}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Y.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListDevicePositionsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/list-positions\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults !== undefined && input.MaxResults !== null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken !== undefined && input.NextToken !== null && {\n            NextToken: input.NextToken\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListGeofenceCollectionsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/list-collections\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults !== undefined && input.MaxResults !== null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken !== undefined && input.NextToken !== null && {\n            NextToken: input.NextToken\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListGeofencesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/list-geofences\";\n\n          if (input.CollectionName !== undefined) {\n            labelValue = input.CollectionName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.NextToken !== undefined && input.NextToken !== null && {\n            NextToken: input.NextToken\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListMapsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/list-maps\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults !== undefined && input.MaxResults !== null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken !== undefined && input.NextToken !== null && {\n            NextToken: input.NextToken\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListPlaceIndexesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/list-indexes\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults !== undefined && input.MaxResults !== null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken !== undefined && input.NextToken !== null && {\n            NextToken: input.NextToken\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListRouteCalculatorsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/list-calculators\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults !== undefined && input.MaxResults !== null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken !== undefined && input.NextToken !== null && {\n            NextToken: input.NextToken\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListTagsForResourceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tags/{ResourceArn}\";\n\n          if (input.ResourceArn !== undefined) {\n            labelValue = input.ResourceArn;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: ResourceArn.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{ResourceArn}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: ResourceArn.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"metadata.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListTrackerConsumersCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/list-consumers\";\n\n          if (input.TrackerName !== undefined) {\n            labelValue = input.TrackerName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n          }\n\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults !== undefined && input.MaxResults !== null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken !== undefined && input.NextToken !== null && {\n            NextToken: input.NextToken\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListTrackersCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/list-trackers\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults !== undefined && input.MaxResults !== null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken !== undefined && input.NextToken !== null && {\n            NextToken: input.NextToken\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutGeofenceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}\";\n\n          if (input.CollectionName !== undefined) {\n            labelValue = input.CollectionName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n          }\n\n          if (input.GeofenceId !== undefined) {\n            labelValue = input.GeofenceId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: GeofenceId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{GeofenceId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: GeofenceId.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.Geometry !== undefined && input.Geometry !== null && {\n            Geometry: serializeAws_restJson1GeofenceGeometry(input.Geometry, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1SearchPlaceIndexForPositionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}/search/position\";\n\n          if (input.IndexName !== undefined) {\n            labelValue = input.IndexName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: IndexName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{IndexName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: IndexName.\");\n          }\n\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults !== undefined && input.MaxResults !== null && {\n            MaxResults: input.MaxResults\n          }), input.Position !== undefined && input.Position !== null && {\n            Position: serializeAws_restJson1Position(input.Position, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1SearchPlaceIndexForTextCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}/search/text\";\n\n          if (input.IndexName !== undefined) {\n            labelValue = input.IndexName;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: IndexName.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{IndexName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: IndexName.\");\n          }\n\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, input.BiasPosition !== undefined && input.BiasPosition !== null && {\n            BiasPosition: serializeAws_restJson1Position(input.BiasPosition, context)\n          }), input.FilterBBox !== undefined && input.FilterBBox !== null && {\n            FilterBBox: serializeAws_restJson1BoundingBox(input.FilterBBox, context)\n          }), input.FilterCountries !== undefined && input.FilterCountries !== null && {\n            FilterCountries: serializeAws_restJson1CountryCodeList(input.FilterCountries, context)\n          }), input.MaxResults !== undefined && input.MaxResults !== null && {\n            MaxResults: input.MaxResults\n          }), input.Text !== undefined && input.Text !== null && {\n            Text: input.Text\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1TagResourceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tags/{ResourceArn}\";\n\n          if (input.ResourceArn !== undefined) {\n            labelValue = input.ResourceArn;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: ResourceArn.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{ResourceArn}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: ResourceArn.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.Tags !== undefined && input.Tags !== null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"metadata.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1UntagResourceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, resolvedHostname;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tags/{ResourceArn}\";\n\n          if (input.ResourceArn !== undefined) {\n            labelValue = input.ResourceArn;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: ResourceArn.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{ResourceArn}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: ResourceArn.\");\n          }\n\n          query = __assign({}, input.TagKeys !== undefined && {\n            tagKeys: (input.TagKeys || []).map(function (_entry) {\n              return _entry;\n            })\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"metadata.\" + resolvedHostname;\n\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1AssociateTrackerConsumerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1AssociateTrackerConsumerCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1AssociateTrackerConsumerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;\n\n    var _j;\n\n    return __generator(this, function (_k) {\n      switch (_k.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _j = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 12];\n          }\n\n          return [3\n          /*break*/\n          , 14];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 14:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _k.label = 15;\n\n        case 15:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Errors: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Errors !== undefined && data.Errors !== null) {\n            contents.Errors = deserializeAws_restJson1BatchDeleteDevicePositionHistoryErrorList(data.Errors, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1BatchDeleteGeofenceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1BatchDeleteGeofenceCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Errors: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Errors !== undefined && data.Errors !== null) {\n            contents.Errors = deserializeAws_restJson1BatchDeleteGeofenceErrorList(data.Errors, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1BatchDeleteGeofenceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1BatchEvaluateGeofencesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1BatchEvaluateGeofencesCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Errors: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Errors !== undefined && data.Errors !== null) {\n            contents.Errors = deserializeAws_restJson1BatchEvaluateGeofencesErrorList(data.Errors, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1BatchEvaluateGeofencesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1BatchGetDevicePositionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1BatchGetDevicePositionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            DevicePositions: undefined,\n            Errors: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.DevicePositions !== undefined && data.DevicePositions !== null) {\n            contents.DevicePositions = deserializeAws_restJson1DevicePositionList(data.DevicePositions, context);\n          }\n\n          if (data.Errors !== undefined && data.Errors !== null) {\n            contents.Errors = deserializeAws_restJson1BatchGetDevicePositionErrorList(data.Errors, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1BatchGetDevicePositionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1BatchPutGeofenceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1BatchPutGeofenceCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Errors: undefined,\n            Successes: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Errors !== undefined && data.Errors !== null) {\n            contents.Errors = deserializeAws_restJson1BatchPutGeofenceErrorList(data.Errors, context);\n          }\n\n          if (data.Successes !== undefined && data.Successes !== null) {\n            contents.Successes = deserializeAws_restJson1BatchPutGeofenceSuccessList(data.Successes, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1BatchPutGeofenceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1BatchUpdateDevicePositionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1BatchUpdateDevicePositionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Errors: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Errors !== undefined && data.Errors !== null) {\n            contents.Errors = deserializeAws_restJson1BatchUpdateDevicePositionErrorList(data.Errors, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1BatchUpdateDevicePositionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1CalculateRouteCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1CalculateRouteCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Legs: undefined,\n            Summary: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Legs !== undefined && data.Legs !== null) {\n            contents.Legs = deserializeAws_restJson1LegList(data.Legs, context);\n          }\n\n          if (data.Summary !== undefined && data.Summary !== null) {\n            contents.Summary = deserializeAws_restJson1CalculateRouteSummary(data.Summary, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1CalculateRouteCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1CreateGeofenceCollectionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1CreateGeofenceCollectionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CollectionArn: undefined,\n            CollectionName: undefined,\n            CreateTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CollectionArn !== undefined && data.CollectionArn !== null) {\n            contents.CollectionArn = __expectString(data.CollectionArn);\n          }\n\n          if (data.CollectionName !== undefined && data.CollectionName !== null) {\n            contents.CollectionName = __expectString(data.CollectionName);\n          }\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1CreateGeofenceCollectionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1CreateMapCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1CreateMapCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CreateTime: undefined,\n            MapArn: undefined,\n            MapName: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.MapArn !== undefined && data.MapArn !== null) {\n            contents.MapArn = __expectString(data.MapArn);\n          }\n\n          if (data.MapName !== undefined && data.MapName !== null) {\n            contents.MapName = __expectString(data.MapName);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1CreateMapCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1CreatePlaceIndexCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1CreatePlaceIndexCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CreateTime: undefined,\n            IndexArn: undefined,\n            IndexName: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.IndexArn !== undefined && data.IndexArn !== null) {\n            contents.IndexArn = __expectString(data.IndexArn);\n          }\n\n          if (data.IndexName !== undefined && data.IndexName !== null) {\n            contents.IndexName = __expectString(data.IndexName);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1CreatePlaceIndexCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1CreateRouteCalculatorCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1CreateRouteCalculatorCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CalculatorArn: undefined,\n            CalculatorName: undefined,\n            CreateTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CalculatorArn !== undefined && data.CalculatorArn !== null) {\n            contents.CalculatorArn = __expectString(data.CalculatorArn);\n          }\n\n          if (data.CalculatorName !== undefined && data.CalculatorName !== null) {\n            contents.CalculatorName = __expectString(data.CalculatorName);\n          }\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1CreateRouteCalculatorCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1CreateTrackerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1CreateTrackerCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CreateTime: undefined,\n            TrackerArn: undefined,\n            TrackerName: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.TrackerArn !== undefined && data.TrackerArn !== null) {\n            contents.TrackerArn = __expectString(data.TrackerArn);\n          }\n\n          if (data.TrackerName !== undefined && data.TrackerName !== null) {\n            contents.TrackerName = __expectString(data.TrackerName);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1CreateTrackerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DeleteGeofenceCollectionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DeleteGeofenceCollectionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DeleteGeofenceCollectionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DeleteMapCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DeleteMapCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DeleteMapCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DeletePlaceIndexCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DeletePlaceIndexCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DeletePlaceIndexCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DeleteRouteCalculatorCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DeleteRouteCalculatorCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DeleteRouteCalculatorCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DeleteTrackerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DeleteTrackerCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DeleteTrackerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DescribeGeofenceCollectionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DescribeGeofenceCollectionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CollectionArn: undefined,\n            CollectionName: undefined,\n            CreateTime: undefined,\n            Description: undefined,\n            KmsKeyId: undefined,\n            PricingPlan: undefined,\n            PricingPlanDataSource: undefined,\n            Tags: undefined,\n            UpdateTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CollectionArn !== undefined && data.CollectionArn !== null) {\n            contents.CollectionArn = __expectString(data.CollectionArn);\n          }\n\n          if (data.CollectionName !== undefined && data.CollectionName !== null) {\n            contents.CollectionName = __expectString(data.CollectionName);\n          }\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.Description !== undefined && data.Description !== null) {\n            contents.Description = __expectString(data.Description);\n          }\n\n          if (data.KmsKeyId !== undefined && data.KmsKeyId !== null) {\n            contents.KmsKeyId = __expectString(data.KmsKeyId);\n          }\n\n          if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n\n          if (data.PricingPlanDataSource !== undefined && data.PricingPlanDataSource !== null) {\n            contents.PricingPlanDataSource = __expectString(data.PricingPlanDataSource);\n          }\n\n          if (data.Tags !== undefined && data.Tags !== null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n\n          if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n            contents.UpdateTime = new Date(data.UpdateTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DescribeGeofenceCollectionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DescribeMapCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DescribeMapCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Configuration: undefined,\n            CreateTime: undefined,\n            DataSource: undefined,\n            Description: undefined,\n            MapArn: undefined,\n            MapName: undefined,\n            PricingPlan: undefined,\n            Tags: undefined,\n            UpdateTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Configuration !== undefined && data.Configuration !== null) {\n            contents.Configuration = deserializeAws_restJson1MapConfiguration(data.Configuration, context);\n          }\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.DataSource !== undefined && data.DataSource !== null) {\n            contents.DataSource = __expectString(data.DataSource);\n          }\n\n          if (data.Description !== undefined && data.Description !== null) {\n            contents.Description = __expectString(data.Description);\n          }\n\n          if (data.MapArn !== undefined && data.MapArn !== null) {\n            contents.MapArn = __expectString(data.MapArn);\n          }\n\n          if (data.MapName !== undefined && data.MapName !== null) {\n            contents.MapName = __expectString(data.MapName);\n          }\n\n          if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n\n          if (data.Tags !== undefined && data.Tags !== null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n\n          if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n            contents.UpdateTime = new Date(data.UpdateTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DescribeMapCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DescribePlaceIndexCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DescribePlaceIndexCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CreateTime: undefined,\n            DataSource: undefined,\n            DataSourceConfiguration: undefined,\n            Description: undefined,\n            IndexArn: undefined,\n            IndexName: undefined,\n            PricingPlan: undefined,\n            Tags: undefined,\n            UpdateTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.DataSource !== undefined && data.DataSource !== null) {\n            contents.DataSource = __expectString(data.DataSource);\n          }\n\n          if (data.DataSourceConfiguration !== undefined && data.DataSourceConfiguration !== null) {\n            contents.DataSourceConfiguration = deserializeAws_restJson1DataSourceConfiguration(data.DataSourceConfiguration, context);\n          }\n\n          if (data.Description !== undefined && data.Description !== null) {\n            contents.Description = __expectString(data.Description);\n          }\n\n          if (data.IndexArn !== undefined && data.IndexArn !== null) {\n            contents.IndexArn = __expectString(data.IndexArn);\n          }\n\n          if (data.IndexName !== undefined && data.IndexName !== null) {\n            contents.IndexName = __expectString(data.IndexName);\n          }\n\n          if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n\n          if (data.Tags !== undefined && data.Tags !== null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n\n          if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n            contents.UpdateTime = new Date(data.UpdateTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DescribePlaceIndexCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DescribeRouteCalculatorCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DescribeRouteCalculatorCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CalculatorArn: undefined,\n            CalculatorName: undefined,\n            CreateTime: undefined,\n            DataSource: undefined,\n            Description: undefined,\n            PricingPlan: undefined,\n            Tags: undefined,\n            UpdateTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CalculatorArn !== undefined && data.CalculatorArn !== null) {\n            contents.CalculatorArn = __expectString(data.CalculatorArn);\n          }\n\n          if (data.CalculatorName !== undefined && data.CalculatorName !== null) {\n            contents.CalculatorName = __expectString(data.CalculatorName);\n          }\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.DataSource !== undefined && data.DataSource !== null) {\n            contents.DataSource = __expectString(data.DataSource);\n          }\n\n          if (data.Description !== undefined && data.Description !== null) {\n            contents.Description = __expectString(data.Description);\n          }\n\n          if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n\n          if (data.Tags !== undefined && data.Tags !== null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n\n          if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n            contents.UpdateTime = new Date(data.UpdateTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DescribeRouteCalculatorCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DescribeTrackerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DescribeTrackerCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CreateTime: undefined,\n            Description: undefined,\n            KmsKeyId: undefined,\n            PricingPlan: undefined,\n            PricingPlanDataSource: undefined,\n            Tags: undefined,\n            TrackerArn: undefined,\n            TrackerName: undefined,\n            UpdateTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.Description !== undefined && data.Description !== null) {\n            contents.Description = __expectString(data.Description);\n          }\n\n          if (data.KmsKeyId !== undefined && data.KmsKeyId !== null) {\n            contents.KmsKeyId = __expectString(data.KmsKeyId);\n          }\n\n          if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n\n          if (data.PricingPlanDataSource !== undefined && data.PricingPlanDataSource !== null) {\n            contents.PricingPlanDataSource = __expectString(data.PricingPlanDataSource);\n          }\n\n          if (data.Tags !== undefined && data.Tags !== null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n\n          if (data.TrackerArn !== undefined && data.TrackerArn !== null) {\n            contents.TrackerArn = __expectString(data.TrackerArn);\n          }\n\n          if (data.TrackerName !== undefined && data.TrackerName !== null) {\n            contents.TrackerName = __expectString(data.TrackerName);\n          }\n\n          if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n            contents.UpdateTime = new Date(data.UpdateTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DescribeTrackerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DisassociateTrackerConsumerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DisassociateTrackerConsumerCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DisassociateTrackerConsumerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetDevicePositionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetDevicePositionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            DeviceId: undefined,\n            Position: undefined,\n            ReceivedTime: undefined,\n            SampleTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.DeviceId !== undefined && data.DeviceId !== null) {\n            contents.DeviceId = __expectString(data.DeviceId);\n          }\n\n          if (data.Position !== undefined && data.Position !== null) {\n            contents.Position = deserializeAws_restJson1Position(data.Position, context);\n          }\n\n          if (data.ReceivedTime !== undefined && data.ReceivedTime !== null) {\n            contents.ReceivedTime = new Date(data.ReceivedTime);\n          }\n\n          if (data.SampleTime !== undefined && data.SampleTime !== null) {\n            contents.SampleTime = new Date(data.SampleTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetDevicePositionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetDevicePositionHistoryCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetDevicePositionHistoryCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            DevicePositions: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.DevicePositions !== undefined && data.DevicePositions !== null) {\n            contents.DevicePositions = deserializeAws_restJson1DevicePositionList(data.DevicePositions, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetDevicePositionHistoryCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetGeofenceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetGeofenceCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CreateTime: undefined,\n            GeofenceId: undefined,\n            Geometry: undefined,\n            Status: undefined,\n            UpdateTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.GeofenceId !== undefined && data.GeofenceId !== null) {\n            contents.GeofenceId = __expectString(data.GeofenceId);\n          }\n\n          if (data.Geometry !== undefined && data.Geometry !== null) {\n            contents.Geometry = deserializeAws_restJson1GeofenceGeometry(data.Geometry, context);\n          }\n\n          if (data.Status !== undefined && data.Status !== null) {\n            contents.Status = __expectString(data.Status);\n          }\n\n          if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n            contents.UpdateTime = new Date(data.UpdateTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetGeofenceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetMapGlyphsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetMapGlyphsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Blob: undefined,\n            ContentType: undefined\n          };\n\n          if (output.headers[\"content-type\"] !== undefined) {\n            contents.ContentType = output.headers[\"content-type\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.Blob = data;\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetMapGlyphsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetMapSpritesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetMapSpritesCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Blob: undefined,\n            ContentType: undefined\n          };\n\n          if (output.headers[\"content-type\"] !== undefined) {\n            contents.ContentType = output.headers[\"content-type\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.Blob = data;\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetMapSpritesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetMapStyleDescriptorCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetMapStyleDescriptorCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Blob: undefined,\n            ContentType: undefined\n          };\n\n          if (output.headers[\"content-type\"] !== undefined) {\n            contents.ContentType = output.headers[\"content-type\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.Blob = data;\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetMapStyleDescriptorCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetMapTileCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetMapTileCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Blob: undefined,\n            ContentType: undefined\n          };\n\n          if (output.headers[\"content-type\"] !== undefined) {\n            contents.ContentType = output.headers[\"content-type\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.Blob = data;\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetMapTileCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListDevicePositionsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListDevicePositionsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Entries: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Entries !== undefined && data.Entries !== null) {\n            contents.Entries = deserializeAws_restJson1ListDevicePositionsResponseEntryList(data.Entries, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListDevicePositionsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n\n    var _g;\n\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _g = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n          }\n\n          return [3\n          /*break*/\n          , 10];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 10:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _h.label = 11;\n\n        case 11:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListGeofenceCollectionsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListGeofenceCollectionsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Entries: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Entries !== undefined && data.Entries !== null) {\n            contents.Entries = deserializeAws_restJson1ListGeofenceCollectionsResponseEntryList(data.Entries, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListGeofenceCollectionsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n\n    var _g;\n\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _g = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n          }\n\n          return [3\n          /*break*/\n          , 10];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 10:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _h.label = 11;\n\n        case 11:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListGeofencesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListGeofencesCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Entries: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Entries !== undefined && data.Entries !== null) {\n            contents.Entries = deserializeAws_restJson1ListGeofenceResponseEntryList(data.Entries, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListGeofencesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListMapsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListMapsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Entries: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Entries !== undefined && data.Entries !== null) {\n            contents.Entries = deserializeAws_restJson1ListMapsResponseEntryList(data.Entries, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListMapsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n\n    var _g;\n\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _g = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n          }\n\n          return [3\n          /*break*/\n          , 10];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 10:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _h.label = 11;\n\n        case 11:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListPlaceIndexesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListPlaceIndexesCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Entries: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Entries !== undefined && data.Entries !== null) {\n            contents.Entries = deserializeAws_restJson1ListPlaceIndexesResponseEntryList(data.Entries, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListPlaceIndexesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n\n    var _g;\n\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _g = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n          }\n\n          return [3\n          /*break*/\n          , 10];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 10:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _h.label = 11;\n\n        case 11:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListRouteCalculatorsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListRouteCalculatorsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Entries: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Entries !== undefined && data.Entries !== null) {\n            contents.Entries = deserializeAws_restJson1ListRouteCalculatorsResponseEntryList(data.Entries, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListRouteCalculatorsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n\n    var _g;\n\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _g = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n          }\n\n          return [3\n          /*break*/\n          , 10];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 10:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _h.label = 11;\n\n        case 11:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListTagsForResourceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListTagsForResourceCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Tags: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Tags !== undefined && data.Tags !== null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListTagsForResourceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListTrackerConsumersCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListTrackerConsumersCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ConsumerArns: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.ConsumerArns !== undefined && data.ConsumerArns !== null) {\n            contents.ConsumerArns = deserializeAws_restJson1ArnList(data.ConsumerArns, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListTrackerConsumersCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListTrackersCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListTrackersCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Entries: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Entries !== undefined && data.Entries !== null) {\n            contents.Entries = deserializeAws_restJson1ListTrackersResponseEntryList(data.Entries, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListTrackersCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n\n    var _g;\n\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _g = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 8];\n          }\n\n          return [3\n          /*break*/\n          , 10];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 11];\n\n        case 10:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _h.label = 11;\n\n        case 11:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1PutGeofenceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1PutGeofenceCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CreateTime: undefined,\n            GeofenceId: undefined,\n            UpdateTime: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CreateTime !== undefined && data.CreateTime !== null) {\n            contents.CreateTime = new Date(data.CreateTime);\n          }\n\n          if (data.GeofenceId !== undefined && data.GeofenceId !== null) {\n            contents.GeofenceId = __expectString(data.GeofenceId);\n          }\n\n          if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n            contents.UpdateTime = new Date(data.UpdateTime);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1PutGeofenceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;\n\n    var _j;\n\n    return __generator(this, function (_k) {\n      switch (_k.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _j = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#ConflictException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 12];\n          }\n\n          return [3\n          /*break*/\n          , 14];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 15];\n\n        case 14:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _k.label = 15;\n\n        case 15:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1SearchPlaceIndexForPositionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1SearchPlaceIndexForPositionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Results: undefined,\n            Summary: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Results !== undefined && data.Results !== null) {\n            contents.Results = deserializeAws_restJson1SearchForPositionResultList(data.Results, context);\n          }\n\n          if (data.Summary !== undefined && data.Summary !== null) {\n            contents.Summary = deserializeAws_restJson1SearchPlaceIndexForPositionSummary(data.Summary, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1SearchPlaceIndexForPositionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1SearchPlaceIndexForTextCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1SearchPlaceIndexForTextCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Results: undefined,\n            Summary: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Results !== undefined && data.Results !== null) {\n            contents.Results = deserializeAws_restJson1SearchForTextResultList(data.Results, context);\n          }\n\n          if (data.Summary !== undefined && data.Summary !== null) {\n            contents.Summary = deserializeAws_restJson1SearchPlaceIndexForTextSummary(data.Summary, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1SearchPlaceIndexForTextCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1TagResourceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1TagResourceCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1TagResourceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1UntagResourceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1UntagResourceCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1UntagResourceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n\n    var _h;\n\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.location#ValidationException\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 12];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 13];\n\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1AccessDeniedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"AccessDeniedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.Message = __expectString(data.message);\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ConflictException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.Message = __expectString(data.message);\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InternalServerExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InternalServerException\",\n        $fault: \"server\",\n        $retryable: {},\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.Message = __expectString(data.message);\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1ResourceNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ResourceNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.Message = __expectString(data.message);\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1ThrottlingExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ThrottlingException\",\n        $fault: \"client\",\n        $retryable: {},\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.Message = __expectString(data.message);\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1ValidationExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ValidationException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        FieldList: undefined,\n        Message: undefined,\n        Reason: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.fieldList !== undefined && data.fieldList !== null) {\n        contents.FieldList = deserializeAws_restJson1ValidationExceptionFieldList(data.fieldList, context);\n      }\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.Message = __expectString(data.message);\n      }\n\n      if (data.reason !== undefined && data.reason !== null) {\n        contents.Reason = __expectString(data.reason);\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar serializeAws_restJson1BatchPutGeofenceRequestEntry = function (input, context) {\n  return __assign(__assign({}, input.GeofenceId !== undefined && input.GeofenceId !== null && {\n    GeofenceId: input.GeofenceId\n  }), input.Geometry !== undefined && input.Geometry !== null && {\n    Geometry: serializeAws_restJson1GeofenceGeometry(input.Geometry, context)\n  });\n};\n\nvar serializeAws_restJson1BatchPutGeofenceRequestEntryList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1BatchPutGeofenceRequestEntry(entry, context);\n  });\n};\n\nvar serializeAws_restJson1BoundingBox = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return __serializeFloat(entry);\n  });\n};\n\nvar serializeAws_restJson1CalculateRouteCarModeOptions = function (input, context) {\n  return __assign(__assign({}, input.AvoidFerries !== undefined && input.AvoidFerries !== null && {\n    AvoidFerries: input.AvoidFerries\n  }), input.AvoidTolls !== undefined && input.AvoidTolls !== null && {\n    AvoidTolls: input.AvoidTolls\n  });\n};\n\nvar serializeAws_restJson1CalculateRouteTruckModeOptions = function (input, context) {\n  return __assign(__assign(__assign(__assign({}, input.AvoidFerries !== undefined && input.AvoidFerries !== null && {\n    AvoidFerries: input.AvoidFerries\n  }), input.AvoidTolls !== undefined && input.AvoidTolls !== null && {\n    AvoidTolls: input.AvoidTolls\n  }), input.Dimensions !== undefined && input.Dimensions !== null && {\n    Dimensions: serializeAws_restJson1TruckDimensions(input.Dimensions, context)\n  }), input.Weight !== undefined && input.Weight !== null && {\n    Weight: serializeAws_restJson1TruckWeight(input.Weight, context)\n  });\n};\n\nvar serializeAws_restJson1CountryCodeList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar serializeAws_restJson1DataSourceConfiguration = function (input, context) {\n  return __assign({}, input.IntendedUse !== undefined && input.IntendedUse !== null && {\n    IntendedUse: input.IntendedUse\n  });\n};\n\nvar serializeAws_restJson1DeviceIdsList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar serializeAws_restJson1DevicePositionUpdate = function (input, context) {\n  return __assign(__assign(__assign({}, input.DeviceId !== undefined && input.DeviceId !== null && {\n    DeviceId: input.DeviceId\n  }), input.Position !== undefined && input.Position !== null && {\n    Position: serializeAws_restJson1Position(input.Position, context)\n  }), input.SampleTime !== undefined && input.SampleTime !== null && {\n    SampleTime: input.SampleTime.toISOString().split(\".\")[0] + \"Z\"\n  });\n};\n\nvar serializeAws_restJson1DevicePositionUpdateList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1DevicePositionUpdate(entry, context);\n  });\n};\n\nvar serializeAws_restJson1GeofenceGeometry = function (input, context) {\n  return __assign({}, input.Polygon !== undefined && input.Polygon !== null && {\n    Polygon: serializeAws_restJson1LinearRings(input.Polygon, context)\n  });\n};\n\nvar serializeAws_restJson1IdList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar serializeAws_restJson1LinearRing = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1Position(entry, context);\n  });\n};\n\nvar serializeAws_restJson1LinearRings = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1LinearRing(entry, context);\n  });\n};\n\nvar serializeAws_restJson1MapConfiguration = function (input, context) {\n  return __assign({}, input.Style !== undefined && input.Style !== null && {\n    Style: input.Style\n  });\n};\n\nvar serializeAws_restJson1Position = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return __serializeFloat(entry);\n  });\n};\n\nvar serializeAws_restJson1TagMap = function (input, context) {\n  return Object.entries(input).reduce(function (acc, _a) {\n    var _b;\n\n    var _c = __read(_a, 2),\n        key = _c[0],\n        value = _c[1];\n\n    if (value === null) {\n      return acc;\n    }\n\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\n\nvar serializeAws_restJson1TruckDimensions = function (input, context) {\n  return __assign(__assign(__assign(__assign({}, input.Height !== undefined && input.Height !== null && {\n    Height: __serializeFloat(input.Height)\n  }), input.Length !== undefined && input.Length !== null && {\n    Length: __serializeFloat(input.Length)\n  }), input.Unit !== undefined && input.Unit !== null && {\n    Unit: input.Unit\n  }), input.Width !== undefined && input.Width !== null && {\n    Width: __serializeFloat(input.Width)\n  });\n};\n\nvar serializeAws_restJson1TruckWeight = function (input, context) {\n  return __assign(__assign({}, input.Total !== undefined && input.Total !== null && {\n    Total: __serializeFloat(input.Total)\n  }), input.Unit !== undefined && input.Unit !== null && {\n    Unit: input.Unit\n  });\n};\n\nvar serializeAws_restJson1WaypointPositionList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1Position(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1ArnList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return __expectString(entry);\n  });\n};\n\nvar deserializeAws_restJson1BatchDeleteDevicePositionHistoryError = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Error: output.Error !== undefined && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1BatchDeleteDevicePositionHistoryErrorList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1BatchDeleteDevicePositionHistoryError(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1BatchDeleteGeofenceError = function (output, context) {\n  return {\n    Error: output.Error !== undefined && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined,\n    GeofenceId: __expectString(output.GeofenceId)\n  };\n};\n\nvar deserializeAws_restJson1BatchDeleteGeofenceErrorList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1BatchDeleteGeofenceError(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1BatchEvaluateGeofencesError = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Error: output.Error !== undefined && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined,\n    SampleTime: output.SampleTime !== undefined && output.SampleTime !== null ? new Date(output.SampleTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1BatchEvaluateGeofencesErrorList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1BatchEvaluateGeofencesError(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1BatchGetDevicePositionError = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Error: output.Error !== undefined && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1BatchGetDevicePositionErrorList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1BatchGetDevicePositionError(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1BatchItemError = function (output, context) {\n  return {\n    Code: __expectString(output.Code),\n    Message: __expectString(output.Message)\n  };\n};\n\nvar deserializeAws_restJson1BatchPutGeofenceError = function (output, context) {\n  return {\n    Error: output.Error !== undefined && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined,\n    GeofenceId: __expectString(output.GeofenceId)\n  };\n};\n\nvar deserializeAws_restJson1BatchPutGeofenceErrorList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1BatchPutGeofenceError(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1BatchPutGeofenceSuccess = function (output, context) {\n  return {\n    CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n    GeofenceId: __expectString(output.GeofenceId),\n    UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1BatchPutGeofenceSuccessList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1BatchPutGeofenceSuccess(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1BatchUpdateDevicePositionError = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Error: output.Error !== undefined && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined,\n    SampleTime: output.SampleTime !== undefined && output.SampleTime !== null ? new Date(output.SampleTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1BatchUpdateDevicePositionErrorList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1BatchUpdateDevicePositionError(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1BoundingBox = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return __handleFloat(entry);\n  });\n};\n\nvar deserializeAws_restJson1CalculateRouteSummary = function (output, context) {\n  return {\n    DataSource: __expectString(output.DataSource),\n    Distance: __handleFloat(output.Distance),\n    DistanceUnit: __expectString(output.DistanceUnit),\n    DurationSeconds: __handleFloat(output.DurationSeconds),\n    RouteBBox: output.RouteBBox !== undefined && output.RouteBBox !== null ? deserializeAws_restJson1BoundingBox(output.RouteBBox, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1CountryCodeList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return __expectString(entry);\n  });\n};\n\nvar deserializeAws_restJson1DataSourceConfiguration = function (output, context) {\n  return {\n    IntendedUse: __expectString(output.IntendedUse)\n  };\n};\n\nvar deserializeAws_restJson1DevicePosition = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Position: output.Position !== undefined && output.Position !== null ? deserializeAws_restJson1Position(output.Position, context) : undefined,\n    ReceivedTime: output.ReceivedTime !== undefined && output.ReceivedTime !== null ? new Date(output.ReceivedTime) : undefined,\n    SampleTime: output.SampleTime !== undefined && output.SampleTime !== null ? new Date(output.SampleTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1DevicePositionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1DevicePosition(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1GeofenceGeometry = function (output, context) {\n  return {\n    Polygon: output.Polygon !== undefined && output.Polygon !== null ? deserializeAws_restJson1LinearRings(output.Polygon, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1Leg = function (output, context) {\n  return {\n    Distance: __handleFloat(output.Distance),\n    DurationSeconds: __handleFloat(output.DurationSeconds),\n    EndPosition: output.EndPosition !== undefined && output.EndPosition !== null ? deserializeAws_restJson1Position(output.EndPosition, context) : undefined,\n    Geometry: output.Geometry !== undefined && output.Geometry !== null ? deserializeAws_restJson1LegGeometry(output.Geometry, context) : undefined,\n    StartPosition: output.StartPosition !== undefined && output.StartPosition !== null ? deserializeAws_restJson1Position(output.StartPosition, context) : undefined,\n    Steps: output.Steps !== undefined && output.Steps !== null ? deserializeAws_restJson1StepList(output.Steps, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1LegGeometry = function (output, context) {\n  return {\n    LineString: output.LineString !== undefined && output.LineString !== null ? deserializeAws_restJson1LineString(output.LineString, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1LegList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1Leg(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1LinearRing = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1Position(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1LinearRings = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1LinearRing(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1LineString = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1Position(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1ListDevicePositionsResponseEntry = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Position: output.Position !== undefined && output.Position !== null ? deserializeAws_restJson1Position(output.Position, context) : undefined,\n    SampleTime: output.SampleTime !== undefined && output.SampleTime !== null ? new Date(output.SampleTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1ListDevicePositionsResponseEntryList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1ListDevicePositionsResponseEntry(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1ListGeofenceCollectionsResponseEntry = function (output, context) {\n  return {\n    CollectionName: __expectString(output.CollectionName),\n    CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n    Description: __expectString(output.Description),\n    PricingPlan: __expectString(output.PricingPlan),\n    PricingPlanDataSource: __expectString(output.PricingPlanDataSource),\n    UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1ListGeofenceCollectionsResponseEntryList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1ListGeofenceCollectionsResponseEntry(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1ListGeofenceResponseEntry = function (output, context) {\n  return {\n    CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n    GeofenceId: __expectString(output.GeofenceId),\n    Geometry: output.Geometry !== undefined && output.Geometry !== null ? deserializeAws_restJson1GeofenceGeometry(output.Geometry, context) : undefined,\n    Status: __expectString(output.Status),\n    UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1ListGeofenceResponseEntryList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1ListGeofenceResponseEntry(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1ListMapsResponseEntry = function (output, context) {\n  return {\n    CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n    DataSource: __expectString(output.DataSource),\n    Description: __expectString(output.Description),\n    MapName: __expectString(output.MapName),\n    PricingPlan: __expectString(output.PricingPlan),\n    UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1ListMapsResponseEntryList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1ListMapsResponseEntry(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1ListPlaceIndexesResponseEntry = function (output, context) {\n  return {\n    CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n    DataSource: __expectString(output.DataSource),\n    Description: __expectString(output.Description),\n    IndexName: __expectString(output.IndexName),\n    PricingPlan: __expectString(output.PricingPlan),\n    UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1ListPlaceIndexesResponseEntryList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1ListPlaceIndexesResponseEntry(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1ListRouteCalculatorsResponseEntry = function (output, context) {\n  return {\n    CalculatorName: __expectString(output.CalculatorName),\n    CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n    DataSource: __expectString(output.DataSource),\n    Description: __expectString(output.Description),\n    PricingPlan: __expectString(output.PricingPlan),\n    UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1ListRouteCalculatorsResponseEntryList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1ListRouteCalculatorsResponseEntry(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1ListTrackersResponseEntry = function (output, context) {\n  return {\n    CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n    Description: __expectString(output.Description),\n    PricingPlan: __expectString(output.PricingPlan),\n    PricingPlanDataSource: __expectString(output.PricingPlanDataSource),\n    TrackerName: __expectString(output.TrackerName),\n    UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined\n  };\n};\n\nvar deserializeAws_restJson1ListTrackersResponseEntryList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1ListTrackersResponseEntry(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1MapConfiguration = function (output, context) {\n  return {\n    Style: __expectString(output.Style)\n  };\n};\n\nvar deserializeAws_restJson1Place = function (output, context) {\n  return {\n    AddressNumber: __expectString(output.AddressNumber),\n    Country: __expectString(output.Country),\n    Geometry: output.Geometry !== undefined && output.Geometry !== null ? deserializeAws_restJson1PlaceGeometry(output.Geometry, context) : undefined,\n    Label: __expectString(output.Label),\n    Municipality: __expectString(output.Municipality),\n    Neighborhood: __expectString(output.Neighborhood),\n    PostalCode: __expectString(output.PostalCode),\n    Region: __expectString(output.Region),\n    Street: __expectString(output.Street),\n    SubRegion: __expectString(output.SubRegion)\n  };\n};\n\nvar deserializeAws_restJson1PlaceGeometry = function (output, context) {\n  return {\n    Point: output.Point !== undefined && output.Point !== null ? deserializeAws_restJson1Position(output.Point, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1Position = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return __handleFloat(entry);\n  });\n};\n\nvar deserializeAws_restJson1SearchForPositionResult = function (output, context) {\n  return {\n    Place: output.Place !== undefined && output.Place !== null ? deserializeAws_restJson1Place(output.Place, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1SearchForPositionResultList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1SearchForPositionResult(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1SearchForTextResult = function (output, context) {\n  return {\n    Place: output.Place !== undefined && output.Place !== null ? deserializeAws_restJson1Place(output.Place, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1SearchForTextResultList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1SearchForTextResult(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1SearchPlaceIndexForPositionSummary = function (output, context) {\n  return {\n    DataSource: __expectString(output.DataSource),\n    MaxResults: __expectNumber(output.MaxResults),\n    Position: output.Position !== undefined && output.Position !== null ? deserializeAws_restJson1Position(output.Position, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1SearchPlaceIndexForTextSummary = function (output, context) {\n  return {\n    BiasPosition: output.BiasPosition !== undefined && output.BiasPosition !== null ? deserializeAws_restJson1Position(output.BiasPosition, context) : undefined,\n    DataSource: __expectString(output.DataSource),\n    FilterBBox: output.FilterBBox !== undefined && output.FilterBBox !== null ? deserializeAws_restJson1BoundingBox(output.FilterBBox, context) : undefined,\n    FilterCountries: output.FilterCountries !== undefined && output.FilterCountries !== null ? deserializeAws_restJson1CountryCodeList(output.FilterCountries, context) : undefined,\n    MaxResults: __expectNumber(output.MaxResults),\n    ResultBBox: output.ResultBBox !== undefined && output.ResultBBox !== null ? deserializeAws_restJson1BoundingBox(output.ResultBBox, context) : undefined,\n    Text: __expectString(output.Text)\n  };\n};\n\nvar deserializeAws_restJson1Step = function (output, context) {\n  return {\n    Distance: __handleFloat(output.Distance),\n    DurationSeconds: __handleFloat(output.DurationSeconds),\n    EndPosition: output.EndPosition !== undefined && output.EndPosition !== null ? deserializeAws_restJson1Position(output.EndPosition, context) : undefined,\n    GeometryOffset: __expectNumber(output.GeometryOffset),\n    StartPosition: output.StartPosition !== undefined && output.StartPosition !== null ? deserializeAws_restJson1Position(output.StartPosition, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1StepList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1Step(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1TagMap = function (output, context) {\n  return Object.entries(output).reduce(function (acc, _a) {\n    var _b;\n\n    var _c = __read(_a, 2),\n        key = _c[0],\n        value = _c[1];\n\n    if (value === null) {\n      return acc;\n    }\n\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = __expectString(value), _b));\n  }, {});\n};\n\nvar deserializeAws_restJson1ValidationExceptionField = function (output, context) {\n  return {\n    Message: __expectString(output.message),\n    Name: __expectString(output.name)\n  };\n};\n\nvar deserializeAws_restJson1ValidationExceptionFieldList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1ValidationExceptionField(entry, context);\n  });\n};\n\nvar deserializeMetadata = function (output) {\n  var _a;\n\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\n\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\n\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\n\n\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n\n    return cleanValue;\n  };\n\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};","map":{"version":3,"sources":["../../../protocols/Aws_restJson1.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { HttpRequest as __HttpRequest, isValidHostname as __isValidHostname, } from \"@aws-sdk/protocol-http\";\nimport { expectNumber as __expectNumber, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, handleFloat as __handleFloat, serializeFloat as __serializeFloat, } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1AssociateTrackerConsumerCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/tracking/v0/trackers/{TrackerName}/consumers\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                body = JSON.stringify(__assign({}, (input.ConsumerArn !== undefined && input.ConsumerArn !== null && { ConsumerArn: input.ConsumerArn })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1BatchDeleteDevicePositionHistoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/tracking/v0/trackers/{TrackerName}/delete-positions\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                body = JSON.stringify(__assign({}, (input.DeviceIds !== undefined &&\n                    input.DeviceIds !== null && { DeviceIds: serializeAws_restJson1DeviceIdsList(input.DeviceIds, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1BatchDeleteGeofenceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/geofencing/v0/collections/{CollectionName}/delete-geofences\";\n                if (input.CollectionName !== undefined) {\n                    labelValue = input.CollectionName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n                }\n                body = JSON.stringify(__assign({}, (input.GeofenceIds !== undefined &&\n                    input.GeofenceIds !== null && { GeofenceIds: serializeAws_restJson1IdList(input.GeofenceIds, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1BatchEvaluateGeofencesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/geofencing/v0/collections/{CollectionName}/positions\";\n                if (input.CollectionName !== undefined) {\n                    labelValue = input.CollectionName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n                }\n                body = JSON.stringify(__assign({}, (input.DevicePositionUpdates !== undefined &&\n                    input.DevicePositionUpdates !== null && {\n                    DevicePositionUpdates: serializeAws_restJson1DevicePositionUpdateList(input.DevicePositionUpdates, context),\n                })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1BatchGetDevicePositionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/tracking/v0/trackers/{TrackerName}/get-positions\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                body = JSON.stringify(__assign({}, (input.DeviceIds !== undefined &&\n                    input.DeviceIds !== null && { DeviceIds: serializeAws_restJson1IdList(input.DeviceIds, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1BatchPutGeofenceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/geofencing/v0/collections/{CollectionName}/put-geofences\";\n                if (input.CollectionName !== undefined) {\n                    labelValue = input.CollectionName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n                }\n                body = JSON.stringify(__assign({}, (input.Entries !== undefined &&\n                    input.Entries !== null && {\n                    Entries: serializeAws_restJson1BatchPutGeofenceRequestEntryList(input.Entries, context),\n                })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1BatchUpdateDevicePositionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/tracking/v0/trackers/{TrackerName}/positions\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                body = JSON.stringify(__assign({}, (input.Updates !== undefined &&\n                    input.Updates !== null && { Updates: serializeAws_restJson1DevicePositionUpdateList(input.Updates, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1CalculateRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/routes/v0/calculators/{CalculatorName}/calculate/route\";\n                if (input.CalculatorName !== undefined) {\n                    labelValue = input.CalculatorName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CalculatorName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CalculatorName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CalculatorName.\");\n                }\n                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.CarModeOptions !== undefined &&\n                    input.CarModeOptions !== null && {\n                    CarModeOptions: serializeAws_restJson1CalculateRouteCarModeOptions(input.CarModeOptions, context),\n                })), (input.DepartNow !== undefined && input.DepartNow !== null && { DepartNow: input.DepartNow })), (input.DeparturePosition !== undefined &&\n                    input.DeparturePosition !== null && {\n                    DeparturePosition: serializeAws_restJson1Position(input.DeparturePosition, context),\n                })), (input.DepartureTime !== undefined &&\n                    input.DepartureTime !== null && { DepartureTime: input.DepartureTime.toISOString().split(\".\")[0] + \"Z\" })), (input.DestinationPosition !== undefined &&\n                    input.DestinationPosition !== null && {\n                    DestinationPosition: serializeAws_restJson1Position(input.DestinationPosition, context),\n                })), (input.DistanceUnit !== undefined && input.DistanceUnit !== null && { DistanceUnit: input.DistanceUnit })), (input.IncludeLegGeometry !== undefined &&\n                    input.IncludeLegGeometry !== null && { IncludeLegGeometry: input.IncludeLegGeometry })), (input.TravelMode !== undefined && input.TravelMode !== null && { TravelMode: input.TravelMode })), (input.TruckModeOptions !== undefined &&\n                    input.TruckModeOptions !== null && {\n                    TruckModeOptions: serializeAws_restJson1CalculateRouteTruckModeOptions(input.TruckModeOptions, context),\n                })), (input.WaypointPositions !== undefined &&\n                    input.WaypointPositions !== null && {\n                    WaypointPositions: serializeAws_restJson1WaypointPositionList(input.WaypointPositions, context),\n                })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"routes.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1CreateGeofenceCollectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections\";\n                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.CollectionName !== undefined &&\n                    input.CollectionName !== null && { CollectionName: input.CollectionName })), (input.Description !== undefined && input.Description !== null && { Description: input.Description })), (input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId })), (input.PricingPlan !== undefined && input.PricingPlan !== null && { PricingPlan: input.PricingPlan })), (input.PricingPlanDataSource !== undefined &&\n                    input.PricingPlanDataSource !== null && { PricingPlanDataSource: input.PricingPlanDataSource })), (input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1CreateMapCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps\";\n                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, (input.Configuration !== undefined &&\n                    input.Configuration !== null && {\n                    Configuration: serializeAws_restJson1MapConfiguration(input.Configuration, context),\n                })), (input.Description !== undefined && input.Description !== null && { Description: input.Description })), (input.MapName !== undefined && input.MapName !== null && { MapName: input.MapName })), (input.PricingPlan !== undefined && input.PricingPlan !== null && { PricingPlan: input.PricingPlan })), (input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"maps.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1CreatePlaceIndexCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes\";\n                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.DataSource !== undefined && input.DataSource !== null && { DataSource: input.DataSource })), (input.DataSourceConfiguration !== undefined &&\n                    input.DataSourceConfiguration !== null && {\n                    DataSourceConfiguration: serializeAws_restJson1DataSourceConfiguration(input.DataSourceConfiguration, context),\n                })), (input.Description !== undefined && input.Description !== null && { Description: input.Description })), (input.IndexName !== undefined && input.IndexName !== null && { IndexName: input.IndexName })), (input.PricingPlan !== undefined && input.PricingPlan !== null && { PricingPlan: input.PricingPlan })), (input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"places.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1CreateRouteCalculatorCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators\";\n                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, (input.CalculatorName !== undefined &&\n                    input.CalculatorName !== null && { CalculatorName: input.CalculatorName })), (input.DataSource !== undefined && input.DataSource !== null && { DataSource: input.DataSource })), (input.Description !== undefined && input.Description !== null && { Description: input.Description })), (input.PricingPlan !== undefined && input.PricingPlan !== null && { PricingPlan: input.PricingPlan })), (input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"routes.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1CreateTrackerCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers\";\n                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.Description !== undefined && input.Description !== null && { Description: input.Description })), (input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId })), (input.PricingPlan !== undefined && input.PricingPlan !== null && { PricingPlan: input.PricingPlan })), (input.PricingPlanDataSource !== undefined &&\n                    input.PricingPlanDataSource !== null && { PricingPlanDataSource: input.PricingPlanDataSource })), (input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) })), (input.TrackerName !== undefined && input.TrackerName !== null && { TrackerName: input.TrackerName })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DeleteGeofenceCollectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/geofencing/v0/collections/{CollectionName}\";\n                if (input.CollectionName !== undefined) {\n                    labelValue = input.CollectionName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"DELETE\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DeleteMapCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}\";\n                if (input.MapName !== undefined) {\n                    labelValue = input.MapName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: MapName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"maps.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"DELETE\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DeletePlaceIndexCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}\";\n                if (input.IndexName !== undefined) {\n                    labelValue = input.IndexName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: IndexName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{IndexName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: IndexName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"places.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"DELETE\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DeleteRouteCalculatorCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}\";\n                if (input.CalculatorName !== undefined) {\n                    labelValue = input.CalculatorName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CalculatorName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CalculatorName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CalculatorName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"routes.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"DELETE\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DeleteTrackerCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"DELETE\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DescribeGeofenceCollectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/geofencing/v0/collections/{CollectionName}\";\n                if (input.CollectionName !== undefined) {\n                    labelValue = input.CollectionName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DescribeMapCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}\";\n                if (input.MapName !== undefined) {\n                    labelValue = input.MapName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: MapName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"maps.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DescribePlaceIndexCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}\";\n                if (input.IndexName !== undefined) {\n                    labelValue = input.IndexName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: IndexName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{IndexName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: IndexName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"places.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DescribeRouteCalculatorCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}\";\n                if (input.CalculatorName !== undefined) {\n                    labelValue = input.CalculatorName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CalculatorName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CalculatorName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CalculatorName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"routes.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DescribeTrackerCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1DisassociateTrackerConsumerCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/tracking/v0/trackers/{TrackerName}/consumers/{ConsumerArn}\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                if (input.ConsumerArn !== undefined) {\n                    labelValue = input.ConsumerArn;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: ConsumerArn.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{ConsumerArn}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: ConsumerArn.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"DELETE\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1GetDevicePositionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/positions/latest\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                if (input.DeviceId !== undefined) {\n                    labelValue = input.DeviceId;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: DeviceId.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{DeviceId}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: DeviceId.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1GetDevicePositionHistoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/list-positions\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                if (input.DeviceId !== undefined) {\n                    labelValue = input.DeviceId;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: DeviceId.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{DeviceId}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: DeviceId.\");\n                }\n                body = JSON.stringify(__assign(__assign(__assign({}, (input.EndTimeExclusive !== undefined &&\n                    input.EndTimeExclusive !== null && {\n                    EndTimeExclusive: input.EndTimeExclusive.toISOString().split(\".\")[0] + \"Z\",\n                })), (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })), (input.StartTimeInclusive !== undefined &&\n                    input.StartTimeInclusive !== null && {\n                    StartTimeInclusive: input.StartTimeInclusive.toISOString().split(\".\")[0] + \"Z\",\n                })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1GetGeofenceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}\";\n                if (input.CollectionName !== undefined) {\n                    labelValue = input.CollectionName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n                }\n                if (input.GeofenceId !== undefined) {\n                    labelValue = input.GeofenceId;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: GeofenceId.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{GeofenceId}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: GeofenceId.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1GetMapGlyphsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/maps/v0/maps/{MapName}/glyphs/{FontStack}/{FontUnicodeRange}\";\n                if (input.MapName !== undefined) {\n                    labelValue = input.MapName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: MapName.\");\n                }\n                if (input.FontStack !== undefined) {\n                    labelValue = input.FontStack;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: FontStack.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{FontStack}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: FontStack.\");\n                }\n                if (input.FontUnicodeRange !== undefined) {\n                    labelValue = input.FontUnicodeRange;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: FontUnicodeRange.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{FontUnicodeRange}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: FontUnicodeRange.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"maps.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1GetMapSpritesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/maps/v0/maps/{MapName}/sprites/{FileName}\";\n                if (input.MapName !== undefined) {\n                    labelValue = input.MapName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: MapName.\");\n                }\n                if (input.FileName !== undefined) {\n                    labelValue = input.FileName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: FileName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{FileName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: FileName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"maps.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1GetMapStyleDescriptorCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/style-descriptor\";\n                if (input.MapName !== undefined) {\n                    labelValue = input.MapName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: MapName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"maps.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1GetMapTileCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, labelValue, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/tiles/{Z}/{X}/{Y}\";\n                if (input.MapName !== undefined) {\n                    labelValue = input.MapName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: MapName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{MapName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: MapName.\");\n                }\n                if (input.Z !== undefined) {\n                    labelValue = input.Z;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: Z.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{Z}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: Z.\");\n                }\n                if (input.X !== undefined) {\n                    labelValue = input.X;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: X.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{X}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: X.\");\n                }\n                if (input.Y !== undefined) {\n                    labelValue = input.Y;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: Y.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{Y}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: Y.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"maps.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1ListDevicePositionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/tracking/v0/trackers/{TrackerName}/list-positions\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                body = JSON.stringify(__assign(__assign({}, (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1ListGeofenceCollectionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/list-collections\";\n                body = JSON.stringify(__assign(__assign({}, (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1ListGeofencesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/geofencing/v0/collections/{CollectionName}/list-geofences\";\n                if (input.CollectionName !== undefined) {\n                    labelValue = input.CollectionName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n                }\n                body = JSON.stringify(__assign({}, (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1ListMapsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/list-maps\";\n                body = JSON.stringify(__assign(__assign({}, (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"maps.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1ListPlaceIndexesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/list-indexes\";\n                body = JSON.stringify(__assign(__assign({}, (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"places.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1ListRouteCalculatorsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/list-calculators\";\n                body = JSON.stringify(__assign(__assign({}, (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"routes.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1ListTagsForResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tags/{ResourceArn}\";\n                if (input.ResourceArn !== undefined) {\n                    labelValue = input.ResourceArn;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: ResourceArn.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{ResourceArn}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: ResourceArn.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"metadata.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1ListTrackerConsumersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/tracking/v0/trackers/{TrackerName}/list-consumers\";\n                if (input.TrackerName !== undefined) {\n                    labelValue = input.TrackerName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: TrackerName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{TrackerName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: TrackerName.\");\n                }\n                body = JSON.stringify(__assign(__assign({}, (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1ListTrackersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/list-trackers\";\n                body = JSON.stringify(__assign(__assign({}, (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"tracking.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1PutGeofenceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}\";\n                if (input.CollectionName !== undefined) {\n                    labelValue = input.CollectionName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: CollectionName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{CollectionName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: CollectionName.\");\n                }\n                if (input.GeofenceId !== undefined) {\n                    labelValue = input.GeofenceId;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: GeofenceId.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{GeofenceId}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: GeofenceId.\");\n                }\n                body = JSON.stringify(__assign({}, (input.Geometry !== undefined &&\n                    input.Geometry !== null && { Geometry: serializeAws_restJson1GeofenceGeometry(input.Geometry, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"geofencing.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"PUT\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1SearchPlaceIndexForPositionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/places/v0/indexes/{IndexName}/search/position\";\n                if (input.IndexName !== undefined) {\n                    labelValue = input.IndexName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: IndexName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{IndexName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: IndexName.\");\n                }\n                body = JSON.stringify(__assign(__assign({}, (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.Position !== undefined &&\n                    input.Position !== null && { Position: serializeAws_restJson1Position(input.Position, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"places.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1SearchPlaceIndexForTextCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") +\n                    \"/places/v0/indexes/{IndexName}/search/text\";\n                if (input.IndexName !== undefined) {\n                    labelValue = input.IndexName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: IndexName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{IndexName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: IndexName.\");\n                }\n                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, (input.BiasPosition !== undefined &&\n                    input.BiasPosition !== null && { BiasPosition: serializeAws_restJson1Position(input.BiasPosition, context) })), (input.FilterBBox !== undefined &&\n                    input.FilterBBox !== null && { FilterBBox: serializeAws_restJson1BoundingBox(input.FilterBBox, context) })), (input.FilterCountries !== undefined &&\n                    input.FilterCountries !== null && {\n                    FilterCountries: serializeAws_restJson1CountryCodeList(input.FilterCountries, context),\n                })), (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.Text !== undefined && input.Text !== null && { Text: input.Text })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"places.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1TagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {\n                    \"content-type\": \"application/json\",\n                };\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tags/{ResourceArn}\";\n                if (input.ResourceArn !== undefined) {\n                    labelValue = input.ResourceArn;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: ResourceArn.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{ResourceArn}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: ResourceArn.\");\n                }\n                body = JSON.stringify(__assign({}, (input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) })));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"metadata.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1UntagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, resolvedHostname;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0: return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n                headers = {};\n                resolvedPath = \"\" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tags/{ResourceArn}\";\n                if (input.ResourceArn !== undefined) {\n                    labelValue = input.ResourceArn;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: ResourceArn.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{ResourceArn}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: ResourceArn.\");\n                }\n                query = __assign({}, (input.TagKeys !== undefined && { tagKeys: (input.TagKeys || []).map(function (_entry) { return _entry; }) }));\n                return [4 /*yield*/, context.endpoint()];\n            case 2:\n                resolvedHostname = (_c.sent()).hostname;\n                if (context.disableHostPrefix !== true) {\n                    resolvedHostname = \"metadata.\" + resolvedHostname;\n                    if (!__isValidHostname(resolvedHostname)) {\n                        throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n                    }\n                }\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: resolvedHostname,\n                        port: port,\n                        method: \"DELETE\",\n                        headers: headers,\n                        path: resolvedPath,\n                        query: query,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1AssociateTrackerConsumerCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1AssociateTrackerConsumerCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                };\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                _a.sent();\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1AssociateTrackerConsumerCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;\n    var _j;\n    return __generator(this, function (_k) {\n        switch (_k.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _j = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"ConflictException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#ConflictException\": return [3 /*break*/, 4];\n                    case \"InternalServerException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 6];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 8];\n                    case \"ThrottlingException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 10];\n                    case \"ValidationException\": return [3 /*break*/, 12];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 12];\n                }\n                return [3 /*break*/, 14];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 12:\n                _h = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 13:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 14:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _k.label = 15;\n            case 15:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Errors: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Errors !== undefined && data.Errors !== null) {\n                    contents.Errors = deserializeAws_restJson1BatchDeleteDevicePositionHistoryErrorList(data.Errors, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1BatchDeleteGeofenceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1BatchDeleteGeofenceCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Errors: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Errors !== undefined && data.Errors !== null) {\n                    contents.Errors = deserializeAws_restJson1BatchDeleteGeofenceErrorList(data.Errors, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1BatchDeleteGeofenceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1BatchEvaluateGeofencesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1BatchEvaluateGeofencesCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Errors: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Errors !== undefined && data.Errors !== null) {\n                    contents.Errors = deserializeAws_restJson1BatchEvaluateGeofencesErrorList(data.Errors, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1BatchEvaluateGeofencesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1BatchGetDevicePositionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1BatchGetDevicePositionCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    DevicePositions: undefined,\n                    Errors: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.DevicePositions !== undefined && data.DevicePositions !== null) {\n                    contents.DevicePositions = deserializeAws_restJson1DevicePositionList(data.DevicePositions, context);\n                }\n                if (data.Errors !== undefined && data.Errors !== null) {\n                    contents.Errors = deserializeAws_restJson1BatchGetDevicePositionErrorList(data.Errors, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1BatchGetDevicePositionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1BatchPutGeofenceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1BatchPutGeofenceCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Errors: undefined,\n                    Successes: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Errors !== undefined && data.Errors !== null) {\n                    contents.Errors = deserializeAws_restJson1BatchPutGeofenceErrorList(data.Errors, context);\n                }\n                if (data.Successes !== undefined && data.Successes !== null) {\n                    contents.Successes = deserializeAws_restJson1BatchPutGeofenceSuccessList(data.Successes, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1BatchPutGeofenceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1BatchUpdateDevicePositionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1BatchUpdateDevicePositionCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Errors: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Errors !== undefined && data.Errors !== null) {\n                    contents.Errors = deserializeAws_restJson1BatchUpdateDevicePositionErrorList(data.Errors, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1BatchUpdateDevicePositionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1CalculateRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1CalculateRouteCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Legs: undefined,\n                    Summary: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Legs !== undefined && data.Legs !== null) {\n                    contents.Legs = deserializeAws_restJson1LegList(data.Legs, context);\n                }\n                if (data.Summary !== undefined && data.Summary !== null) {\n                    contents.Summary = deserializeAws_restJson1CalculateRouteSummary(data.Summary, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1CalculateRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1CreateGeofenceCollectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1CreateGeofenceCollectionCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CollectionArn: undefined,\n                    CollectionName: undefined,\n                    CreateTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CollectionArn !== undefined && data.CollectionArn !== null) {\n                    contents.CollectionArn = __expectString(data.CollectionArn);\n                }\n                if (data.CollectionName !== undefined && data.CollectionName !== null) {\n                    contents.CollectionName = __expectString(data.CollectionName);\n                }\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1CreateGeofenceCollectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"ConflictException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#ConflictException\": return [3 /*break*/, 4];\n                    case \"InternalServerException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1CreateMapCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1CreateMapCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CreateTime: undefined,\n                    MapArn: undefined,\n                    MapName: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.MapArn !== undefined && data.MapArn !== null) {\n                    contents.MapArn = __expectString(data.MapArn);\n                }\n                if (data.MapName !== undefined && data.MapName !== null) {\n                    contents.MapName = __expectString(data.MapName);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1CreateMapCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"ConflictException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#ConflictException\": return [3 /*break*/, 4];\n                    case \"InternalServerException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1CreatePlaceIndexCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1CreatePlaceIndexCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CreateTime: undefined,\n                    IndexArn: undefined,\n                    IndexName: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.IndexArn !== undefined && data.IndexArn !== null) {\n                    contents.IndexArn = __expectString(data.IndexArn);\n                }\n                if (data.IndexName !== undefined && data.IndexName !== null) {\n                    contents.IndexName = __expectString(data.IndexName);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1CreatePlaceIndexCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"ConflictException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#ConflictException\": return [3 /*break*/, 4];\n                    case \"InternalServerException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1CreateRouteCalculatorCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1CreateRouteCalculatorCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CalculatorArn: undefined,\n                    CalculatorName: undefined,\n                    CreateTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CalculatorArn !== undefined && data.CalculatorArn !== null) {\n                    contents.CalculatorArn = __expectString(data.CalculatorArn);\n                }\n                if (data.CalculatorName !== undefined && data.CalculatorName !== null) {\n                    contents.CalculatorName = __expectString(data.CalculatorName);\n                }\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1CreateRouteCalculatorCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"ConflictException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#ConflictException\": return [3 /*break*/, 4];\n                    case \"InternalServerException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1CreateTrackerCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1CreateTrackerCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CreateTime: undefined,\n                    TrackerArn: undefined,\n                    TrackerName: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.TrackerArn !== undefined && data.TrackerArn !== null) {\n                    contents.TrackerArn = __expectString(data.TrackerArn);\n                }\n                if (data.TrackerName !== undefined && data.TrackerName !== null) {\n                    contents.TrackerName = __expectString(data.TrackerName);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1CreateTrackerCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"ConflictException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#ConflictException\": return [3 /*break*/, 4];\n                    case \"InternalServerException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DeleteGeofenceCollectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DeleteGeofenceCollectionCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                };\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                _a.sent();\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DeleteGeofenceCollectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DeleteMapCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DeleteMapCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                };\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                _a.sent();\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DeleteMapCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DeletePlaceIndexCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DeletePlaceIndexCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                };\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                _a.sent();\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DeletePlaceIndexCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DeleteRouteCalculatorCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DeleteRouteCalculatorCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                };\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                _a.sent();\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DeleteRouteCalculatorCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DeleteTrackerCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DeleteTrackerCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                };\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                _a.sent();\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DeleteTrackerCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DescribeGeofenceCollectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DescribeGeofenceCollectionCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CollectionArn: undefined,\n                    CollectionName: undefined,\n                    CreateTime: undefined,\n                    Description: undefined,\n                    KmsKeyId: undefined,\n                    PricingPlan: undefined,\n                    PricingPlanDataSource: undefined,\n                    Tags: undefined,\n                    UpdateTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CollectionArn !== undefined && data.CollectionArn !== null) {\n                    contents.CollectionArn = __expectString(data.CollectionArn);\n                }\n                if (data.CollectionName !== undefined && data.CollectionName !== null) {\n                    contents.CollectionName = __expectString(data.CollectionName);\n                }\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.Description !== undefined && data.Description !== null) {\n                    contents.Description = __expectString(data.Description);\n                }\n                if (data.KmsKeyId !== undefined && data.KmsKeyId !== null) {\n                    contents.KmsKeyId = __expectString(data.KmsKeyId);\n                }\n                if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n                    contents.PricingPlan = __expectString(data.PricingPlan);\n                }\n                if (data.PricingPlanDataSource !== undefined && data.PricingPlanDataSource !== null) {\n                    contents.PricingPlanDataSource = __expectString(data.PricingPlanDataSource);\n                }\n                if (data.Tags !== undefined && data.Tags !== null) {\n                    contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n                }\n                if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n                    contents.UpdateTime = new Date(data.UpdateTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DescribeGeofenceCollectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DescribeMapCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DescribeMapCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Configuration: undefined,\n                    CreateTime: undefined,\n                    DataSource: undefined,\n                    Description: undefined,\n                    MapArn: undefined,\n                    MapName: undefined,\n                    PricingPlan: undefined,\n                    Tags: undefined,\n                    UpdateTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Configuration !== undefined && data.Configuration !== null) {\n                    contents.Configuration = deserializeAws_restJson1MapConfiguration(data.Configuration, context);\n                }\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.DataSource !== undefined && data.DataSource !== null) {\n                    contents.DataSource = __expectString(data.DataSource);\n                }\n                if (data.Description !== undefined && data.Description !== null) {\n                    contents.Description = __expectString(data.Description);\n                }\n                if (data.MapArn !== undefined && data.MapArn !== null) {\n                    contents.MapArn = __expectString(data.MapArn);\n                }\n                if (data.MapName !== undefined && data.MapName !== null) {\n                    contents.MapName = __expectString(data.MapName);\n                }\n                if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n                    contents.PricingPlan = __expectString(data.PricingPlan);\n                }\n                if (data.Tags !== undefined && data.Tags !== null) {\n                    contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n                }\n                if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n                    contents.UpdateTime = new Date(data.UpdateTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DescribeMapCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DescribePlaceIndexCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DescribePlaceIndexCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CreateTime: undefined,\n                    DataSource: undefined,\n                    DataSourceConfiguration: undefined,\n                    Description: undefined,\n                    IndexArn: undefined,\n                    IndexName: undefined,\n                    PricingPlan: undefined,\n                    Tags: undefined,\n                    UpdateTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.DataSource !== undefined && data.DataSource !== null) {\n                    contents.DataSource = __expectString(data.DataSource);\n                }\n                if (data.DataSourceConfiguration !== undefined && data.DataSourceConfiguration !== null) {\n                    contents.DataSourceConfiguration = deserializeAws_restJson1DataSourceConfiguration(data.DataSourceConfiguration, context);\n                }\n                if (data.Description !== undefined && data.Description !== null) {\n                    contents.Description = __expectString(data.Description);\n                }\n                if (data.IndexArn !== undefined && data.IndexArn !== null) {\n                    contents.IndexArn = __expectString(data.IndexArn);\n                }\n                if (data.IndexName !== undefined && data.IndexName !== null) {\n                    contents.IndexName = __expectString(data.IndexName);\n                }\n                if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n                    contents.PricingPlan = __expectString(data.PricingPlan);\n                }\n                if (data.Tags !== undefined && data.Tags !== null) {\n                    contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n                }\n                if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n                    contents.UpdateTime = new Date(data.UpdateTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DescribePlaceIndexCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DescribeRouteCalculatorCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DescribeRouteCalculatorCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CalculatorArn: undefined,\n                    CalculatorName: undefined,\n                    CreateTime: undefined,\n                    DataSource: undefined,\n                    Description: undefined,\n                    PricingPlan: undefined,\n                    Tags: undefined,\n                    UpdateTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CalculatorArn !== undefined && data.CalculatorArn !== null) {\n                    contents.CalculatorArn = __expectString(data.CalculatorArn);\n                }\n                if (data.CalculatorName !== undefined && data.CalculatorName !== null) {\n                    contents.CalculatorName = __expectString(data.CalculatorName);\n                }\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.DataSource !== undefined && data.DataSource !== null) {\n                    contents.DataSource = __expectString(data.DataSource);\n                }\n                if (data.Description !== undefined && data.Description !== null) {\n                    contents.Description = __expectString(data.Description);\n                }\n                if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n                    contents.PricingPlan = __expectString(data.PricingPlan);\n                }\n                if (data.Tags !== undefined && data.Tags !== null) {\n                    contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n                }\n                if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n                    contents.UpdateTime = new Date(data.UpdateTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DescribeRouteCalculatorCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DescribeTrackerCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DescribeTrackerCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CreateTime: undefined,\n                    Description: undefined,\n                    KmsKeyId: undefined,\n                    PricingPlan: undefined,\n                    PricingPlanDataSource: undefined,\n                    Tags: undefined,\n                    TrackerArn: undefined,\n                    TrackerName: undefined,\n                    UpdateTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.Description !== undefined && data.Description !== null) {\n                    contents.Description = __expectString(data.Description);\n                }\n                if (data.KmsKeyId !== undefined && data.KmsKeyId !== null) {\n                    contents.KmsKeyId = __expectString(data.KmsKeyId);\n                }\n                if (data.PricingPlan !== undefined && data.PricingPlan !== null) {\n                    contents.PricingPlan = __expectString(data.PricingPlan);\n                }\n                if (data.PricingPlanDataSource !== undefined && data.PricingPlanDataSource !== null) {\n                    contents.PricingPlanDataSource = __expectString(data.PricingPlanDataSource);\n                }\n                if (data.Tags !== undefined && data.Tags !== null) {\n                    contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n                }\n                if (data.TrackerArn !== undefined && data.TrackerArn !== null) {\n                    contents.TrackerArn = __expectString(data.TrackerArn);\n                }\n                if (data.TrackerName !== undefined && data.TrackerName !== null) {\n                    contents.TrackerName = __expectString(data.TrackerName);\n                }\n                if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n                    contents.UpdateTime = new Date(data.UpdateTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DescribeTrackerCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DisassociateTrackerConsumerCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DisassociateTrackerConsumerCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                };\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                _a.sent();\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DisassociateTrackerConsumerCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1GetDevicePositionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1GetDevicePositionCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    DeviceId: undefined,\n                    Position: undefined,\n                    ReceivedTime: undefined,\n                    SampleTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.DeviceId !== undefined && data.DeviceId !== null) {\n                    contents.DeviceId = __expectString(data.DeviceId);\n                }\n                if (data.Position !== undefined && data.Position !== null) {\n                    contents.Position = deserializeAws_restJson1Position(data.Position, context);\n                }\n                if (data.ReceivedTime !== undefined && data.ReceivedTime !== null) {\n                    contents.ReceivedTime = new Date(data.ReceivedTime);\n                }\n                if (data.SampleTime !== undefined && data.SampleTime !== null) {\n                    contents.SampleTime = new Date(data.SampleTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1GetDevicePositionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1GetDevicePositionHistoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1GetDevicePositionHistoryCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    DevicePositions: undefined,\n                    NextToken: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.DevicePositions !== undefined && data.DevicePositions !== null) {\n                    contents.DevicePositions = deserializeAws_restJson1DevicePositionList(data.DevicePositions, context);\n                }\n                if (data.NextToken !== undefined && data.NextToken !== null) {\n                    contents.NextToken = __expectString(data.NextToken);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1GetDevicePositionHistoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1GetGeofenceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1GetGeofenceCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CreateTime: undefined,\n                    GeofenceId: undefined,\n                    Geometry: undefined,\n                    Status: undefined,\n                    UpdateTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.GeofenceId !== undefined && data.GeofenceId !== null) {\n                    contents.GeofenceId = __expectString(data.GeofenceId);\n                }\n                if (data.Geometry !== undefined && data.Geometry !== null) {\n                    contents.Geometry = deserializeAws_restJson1GeofenceGeometry(data.Geometry, context);\n                }\n                if (data.Status !== undefined && data.Status !== null) {\n                    contents.Status = __expectString(data.Status);\n                }\n                if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n                    contents.UpdateTime = new Date(data.UpdateTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1GetGeofenceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1GetMapGlyphsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1GetMapGlyphsCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Blob: undefined,\n                    ContentType: undefined,\n                };\n                if (output.headers[\"content-type\"] !== undefined) {\n                    contents.ContentType = output.headers[\"content-type\"];\n                }\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                contents.Blob = data;\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1GetMapGlyphsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1GetMapSpritesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1GetMapSpritesCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Blob: undefined,\n                    ContentType: undefined,\n                };\n                if (output.headers[\"content-type\"] !== undefined) {\n                    contents.ContentType = output.headers[\"content-type\"];\n                }\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                contents.Blob = data;\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1GetMapSpritesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1GetMapStyleDescriptorCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1GetMapStyleDescriptorCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Blob: undefined,\n                    ContentType: undefined,\n                };\n                if (output.headers[\"content-type\"] !== undefined) {\n                    contents.ContentType = output.headers[\"content-type\"];\n                }\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                contents.Blob = data;\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1GetMapStyleDescriptorCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1GetMapTileCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1GetMapTileCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Blob: undefined,\n                    ContentType: undefined,\n                };\n                if (output.headers[\"content-type\"] !== undefined) {\n                    contents.ContentType = output.headers[\"content-type\"];\n                }\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                contents.Blob = data;\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1GetMapTileCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1ListDevicePositionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1ListDevicePositionsCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Entries: undefined,\n                    NextToken: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Entries !== undefined && data.Entries !== null) {\n                    contents.Entries = deserializeAws_restJson1ListDevicePositionsResponseEntryList(data.Entries, context);\n                }\n                if (data.NextToken !== undefined && data.NextToken !== null) {\n                    contents.NextToken = __expectString(data.NextToken);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1ListDevicePositionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n    var _g;\n    return __generator(this, function (_h) {\n        switch (_h.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _g = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ThrottlingException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 6];\n                    case \"ValidationException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 8];\n                }\n                return [3 /*break*/, 10];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 10:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _h.label = 11;\n            case 11:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1ListGeofenceCollectionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1ListGeofenceCollectionsCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Entries: undefined,\n                    NextToken: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Entries !== undefined && data.Entries !== null) {\n                    contents.Entries = deserializeAws_restJson1ListGeofenceCollectionsResponseEntryList(data.Entries, context);\n                }\n                if (data.NextToken !== undefined && data.NextToken !== null) {\n                    contents.NextToken = __expectString(data.NextToken);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1ListGeofenceCollectionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n    var _g;\n    return __generator(this, function (_h) {\n        switch (_h.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _g = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ThrottlingException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 6];\n                    case \"ValidationException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 8];\n                }\n                return [3 /*break*/, 10];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 10:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _h.label = 11;\n            case 11:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1ListGeofencesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1ListGeofencesCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Entries: undefined,\n                    NextToken: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Entries !== undefined && data.Entries !== null) {\n                    contents.Entries = deserializeAws_restJson1ListGeofenceResponseEntryList(data.Entries, context);\n                }\n                if (data.NextToken !== undefined && data.NextToken !== null) {\n                    contents.NextToken = __expectString(data.NextToken);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1ListGeofencesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1ListMapsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1ListMapsCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Entries: undefined,\n                    NextToken: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Entries !== undefined && data.Entries !== null) {\n                    contents.Entries = deserializeAws_restJson1ListMapsResponseEntryList(data.Entries, context);\n                }\n                if (data.NextToken !== undefined && data.NextToken !== null) {\n                    contents.NextToken = __expectString(data.NextToken);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1ListMapsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n    var _g;\n    return __generator(this, function (_h) {\n        switch (_h.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _g = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ThrottlingException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 6];\n                    case \"ValidationException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 8];\n                }\n                return [3 /*break*/, 10];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 10:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _h.label = 11;\n            case 11:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1ListPlaceIndexesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1ListPlaceIndexesCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Entries: undefined,\n                    NextToken: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Entries !== undefined && data.Entries !== null) {\n                    contents.Entries = deserializeAws_restJson1ListPlaceIndexesResponseEntryList(data.Entries, context);\n                }\n                if (data.NextToken !== undefined && data.NextToken !== null) {\n                    contents.NextToken = __expectString(data.NextToken);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1ListPlaceIndexesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n    var _g;\n    return __generator(this, function (_h) {\n        switch (_h.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _g = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ThrottlingException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 6];\n                    case \"ValidationException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 8];\n                }\n                return [3 /*break*/, 10];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 10:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _h.label = 11;\n            case 11:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1ListRouteCalculatorsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1ListRouteCalculatorsCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Entries: undefined,\n                    NextToken: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Entries !== undefined && data.Entries !== null) {\n                    contents.Entries = deserializeAws_restJson1ListRouteCalculatorsResponseEntryList(data.Entries, context);\n                }\n                if (data.NextToken !== undefined && data.NextToken !== null) {\n                    contents.NextToken = __expectString(data.NextToken);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1ListRouteCalculatorsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n    var _g;\n    return __generator(this, function (_h) {\n        switch (_h.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _g = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ThrottlingException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 6];\n                    case \"ValidationException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 8];\n                }\n                return [3 /*break*/, 10];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 10:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _h.label = 11;\n            case 11:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1ListTagsForResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1ListTagsForResourceCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Tags: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Tags !== undefined && data.Tags !== null) {\n                    contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1ListTagsForResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1ListTrackerConsumersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1ListTrackerConsumersCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    ConsumerArns: undefined,\n                    NextToken: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.ConsumerArns !== undefined && data.ConsumerArns !== null) {\n                    contents.ConsumerArns = deserializeAws_restJson1ArnList(data.ConsumerArns, context);\n                }\n                if (data.NextToken !== undefined && data.NextToken !== null) {\n                    contents.NextToken = __expectString(data.NextToken);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1ListTrackerConsumersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1ListTrackersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1ListTrackersCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Entries: undefined,\n                    NextToken: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Entries !== undefined && data.Entries !== null) {\n                    contents.Entries = deserializeAws_restJson1ListTrackersResponseEntryList(data.Entries, context);\n                }\n                if (data.NextToken !== undefined && data.NextToken !== null) {\n                    contents.NextToken = __expectString(data.NextToken);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1ListTrackersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n    var _g;\n    return __generator(this, function (_h) {\n        switch (_h.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _g = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ThrottlingException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 6];\n                    case \"ValidationException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 8];\n                }\n                return [3 /*break*/, 10];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 10:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _h.label = 11;\n            case 11:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1PutGeofenceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1PutGeofenceCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    CreateTime: undefined,\n                    GeofenceId: undefined,\n                    UpdateTime: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.CreateTime !== undefined && data.CreateTime !== null) {\n                    contents.CreateTime = new Date(data.CreateTime);\n                }\n                if (data.GeofenceId !== undefined && data.GeofenceId !== null) {\n                    contents.GeofenceId = __expectString(data.GeofenceId);\n                }\n                if (data.UpdateTime !== undefined && data.UpdateTime !== null) {\n                    contents.UpdateTime = new Date(data.UpdateTime);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1PutGeofenceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;\n    var _j;\n    return __generator(this, function (_k) {\n        switch (_k.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _j = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"ConflictException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#ConflictException\": return [3 /*break*/, 4];\n                    case \"InternalServerException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 6];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 8];\n                    case \"ThrottlingException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 10];\n                    case \"ValidationException\": return [3 /*break*/, 12];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 12];\n                }\n                return [3 /*break*/, 14];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 12:\n                _h = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 13:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 15];\n            case 14:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _k.label = 15;\n            case 15:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1SearchPlaceIndexForPositionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1SearchPlaceIndexForPositionCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Results: undefined,\n                    Summary: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Results !== undefined && data.Results !== null) {\n                    contents.Results = deserializeAws_restJson1SearchForPositionResultList(data.Results, context);\n                }\n                if (data.Summary !== undefined && data.Summary !== null) {\n                    contents.Summary = deserializeAws_restJson1SearchPlaceIndexForPositionSummary(data.Summary, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1SearchPlaceIndexForPositionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1SearchPlaceIndexForTextCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1SearchPlaceIndexForTextCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    Results: undefined,\n                    Summary: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.Results !== undefined && data.Results !== null) {\n                    contents.Results = deserializeAws_restJson1SearchForTextResultList(data.Results, context);\n                }\n                if (data.Summary !== undefined && data.Summary !== null) {\n                    contents.Summary = deserializeAws_restJson1SearchPlaceIndexForTextSummary(data.Summary, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1SearchPlaceIndexForTextCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1TagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1TagResourceCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                };\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                _a.sent();\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1TagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1UntagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1UntagResourceCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                };\n                return [4 /*yield*/, collectBody(output.body, context)];\n            case 1:\n                _a.sent();\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1UntagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.location#AccessDeniedException\": return [3 /*break*/, 2];\n                    case \"InternalServerException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.location#InternalServerException\": return [3 /*break*/, 4];\n                    case \"ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.location#ResourceNotFoundException\": return [3 /*break*/, 6];\n                    case \"ThrottlingException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.location#ThrottlingException\": return [3 /*break*/, 8];\n                    case \"ValidationException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.location#ValidationException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nvar deserializeAws_restJson1AccessDeniedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"AccessDeniedException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            Message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.Message = __expectString(data.message);\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"ConflictException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            Message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.Message = __expectString(data.message);\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1InternalServerExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InternalServerException\",\n            $fault: \"server\",\n            $retryable: {},\n            $metadata: deserializeMetadata(parsedOutput),\n            Message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.Message = __expectString(data.message);\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1ResourceNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"ResourceNotFoundException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            Message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.Message = __expectString(data.message);\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1ThrottlingExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"ThrottlingException\",\n            $fault: \"client\",\n            $retryable: {},\n            $metadata: deserializeMetadata(parsedOutput),\n            Message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.Message = __expectString(data.message);\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1ValidationExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"ValidationException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            FieldList: undefined,\n            Message: undefined,\n            Reason: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.fieldList !== undefined && data.fieldList !== null) {\n            contents.FieldList = deserializeAws_restJson1ValidationExceptionFieldList(data.fieldList, context);\n        }\n        if (data.message !== undefined && data.message !== null) {\n            contents.Message = __expectString(data.message);\n        }\n        if (data.reason !== undefined && data.reason !== null) {\n            contents.Reason = __expectString(data.reason);\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar serializeAws_restJson1BatchPutGeofenceRequestEntry = function (input, context) {\n    return __assign(__assign({}, (input.GeofenceId !== undefined && input.GeofenceId !== null && { GeofenceId: input.GeofenceId })), (input.Geometry !== undefined &&\n        input.Geometry !== null && { Geometry: serializeAws_restJson1GeofenceGeometry(input.Geometry, context) }));\n};\nvar serializeAws_restJson1BatchPutGeofenceRequestEntryList = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return serializeAws_restJson1BatchPutGeofenceRequestEntry(entry, context);\n    });\n};\nvar serializeAws_restJson1BoundingBox = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return __serializeFloat(entry);\n    });\n};\nvar serializeAws_restJson1CalculateRouteCarModeOptions = function (input, context) {\n    return __assign(__assign({}, (input.AvoidFerries !== undefined && input.AvoidFerries !== null && { AvoidFerries: input.AvoidFerries })), (input.AvoidTolls !== undefined && input.AvoidTolls !== null && { AvoidTolls: input.AvoidTolls }));\n};\nvar serializeAws_restJson1CalculateRouteTruckModeOptions = function (input, context) {\n    return __assign(__assign(__assign(__assign({}, (input.AvoidFerries !== undefined && input.AvoidFerries !== null && { AvoidFerries: input.AvoidFerries })), (input.AvoidTolls !== undefined && input.AvoidTolls !== null && { AvoidTolls: input.AvoidTolls })), (input.Dimensions !== undefined &&\n        input.Dimensions !== null && { Dimensions: serializeAws_restJson1TruckDimensions(input.Dimensions, context) })), (input.Weight !== undefined &&\n        input.Weight !== null && { Weight: serializeAws_restJson1TruckWeight(input.Weight, context) }));\n};\nvar serializeAws_restJson1CountryCodeList = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return entry;\n    });\n};\nvar serializeAws_restJson1DataSourceConfiguration = function (input, context) {\n    return __assign({}, (input.IntendedUse !== undefined && input.IntendedUse !== null && { IntendedUse: input.IntendedUse }));\n};\nvar serializeAws_restJson1DeviceIdsList = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return entry;\n    });\n};\nvar serializeAws_restJson1DevicePositionUpdate = function (input, context) {\n    return __assign(__assign(__assign({}, (input.DeviceId !== undefined && input.DeviceId !== null && { DeviceId: input.DeviceId })), (input.Position !== undefined &&\n        input.Position !== null && { Position: serializeAws_restJson1Position(input.Position, context) })), (input.SampleTime !== undefined &&\n        input.SampleTime !== null && { SampleTime: input.SampleTime.toISOString().split(\".\")[0] + \"Z\" }));\n};\nvar serializeAws_restJson1DevicePositionUpdateList = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return serializeAws_restJson1DevicePositionUpdate(entry, context);\n    });\n};\nvar serializeAws_restJson1GeofenceGeometry = function (input, context) {\n    return __assign({}, (input.Polygon !== undefined &&\n        input.Polygon !== null && { Polygon: serializeAws_restJson1LinearRings(input.Polygon, context) }));\n};\nvar serializeAws_restJson1IdList = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return entry;\n    });\n};\nvar serializeAws_restJson1LinearRing = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return serializeAws_restJson1Position(entry, context);\n    });\n};\nvar serializeAws_restJson1LinearRings = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return serializeAws_restJson1LinearRing(entry, context);\n    });\n};\nvar serializeAws_restJson1MapConfiguration = function (input, context) {\n    return __assign({}, (input.Style !== undefined && input.Style !== null && { Style: input.Style }));\n};\nvar serializeAws_restJson1Position = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return __serializeFloat(entry);\n    });\n};\nvar serializeAws_restJson1TagMap = function (input, context) {\n    return Object.entries(input).reduce(function (acc, _a) {\n        var _b;\n        var _c = __read(_a, 2), key = _c[0], value = _c[1];\n        if (value === null) {\n            return acc;\n        }\n        return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n    }, {});\n};\nvar serializeAws_restJson1TruckDimensions = function (input, context) {\n    return __assign(__assign(__assign(__assign({}, (input.Height !== undefined && input.Height !== null && { Height: __serializeFloat(input.Height) })), (input.Length !== undefined && input.Length !== null && { Length: __serializeFloat(input.Length) })), (input.Unit !== undefined && input.Unit !== null && { Unit: input.Unit })), (input.Width !== undefined && input.Width !== null && { Width: __serializeFloat(input.Width) }));\n};\nvar serializeAws_restJson1TruckWeight = function (input, context) {\n    return __assign(__assign({}, (input.Total !== undefined && input.Total !== null && { Total: __serializeFloat(input.Total) })), (input.Unit !== undefined && input.Unit !== null && { Unit: input.Unit }));\n};\nvar serializeAws_restJson1WaypointPositionList = function (input, context) {\n    return input\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return serializeAws_restJson1Position(entry, context);\n    });\n};\nvar deserializeAws_restJson1ArnList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return __expectString(entry);\n    });\n};\nvar deserializeAws_restJson1BatchDeleteDevicePositionHistoryError = function (output, context) {\n    return {\n        DeviceId: __expectString(output.DeviceId),\n        Error: output.Error !== undefined && output.Error !== null\n            ? deserializeAws_restJson1BatchItemError(output.Error, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1BatchDeleteDevicePositionHistoryErrorList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1BatchDeleteDevicePositionHistoryError(entry, context);\n    });\n};\nvar deserializeAws_restJson1BatchDeleteGeofenceError = function (output, context) {\n    return {\n        Error: output.Error !== undefined && output.Error !== null\n            ? deserializeAws_restJson1BatchItemError(output.Error, context)\n            : undefined,\n        GeofenceId: __expectString(output.GeofenceId),\n    };\n};\nvar deserializeAws_restJson1BatchDeleteGeofenceErrorList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1BatchDeleteGeofenceError(entry, context);\n    });\n};\nvar deserializeAws_restJson1BatchEvaluateGeofencesError = function (output, context) {\n    return {\n        DeviceId: __expectString(output.DeviceId),\n        Error: output.Error !== undefined && output.Error !== null\n            ? deserializeAws_restJson1BatchItemError(output.Error, context)\n            : undefined,\n        SampleTime: output.SampleTime !== undefined && output.SampleTime !== null ? new Date(output.SampleTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1BatchEvaluateGeofencesErrorList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1BatchEvaluateGeofencesError(entry, context);\n    });\n};\nvar deserializeAws_restJson1BatchGetDevicePositionError = function (output, context) {\n    return {\n        DeviceId: __expectString(output.DeviceId),\n        Error: output.Error !== undefined && output.Error !== null\n            ? deserializeAws_restJson1BatchItemError(output.Error, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1BatchGetDevicePositionErrorList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1BatchGetDevicePositionError(entry, context);\n    });\n};\nvar deserializeAws_restJson1BatchItemError = function (output, context) {\n    return {\n        Code: __expectString(output.Code),\n        Message: __expectString(output.Message),\n    };\n};\nvar deserializeAws_restJson1BatchPutGeofenceError = function (output, context) {\n    return {\n        Error: output.Error !== undefined && output.Error !== null\n            ? deserializeAws_restJson1BatchItemError(output.Error, context)\n            : undefined,\n        GeofenceId: __expectString(output.GeofenceId),\n    };\n};\nvar deserializeAws_restJson1BatchPutGeofenceErrorList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1BatchPutGeofenceError(entry, context);\n    });\n};\nvar deserializeAws_restJson1BatchPutGeofenceSuccess = function (output, context) {\n    return {\n        CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n        GeofenceId: __expectString(output.GeofenceId),\n        UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1BatchPutGeofenceSuccessList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1BatchPutGeofenceSuccess(entry, context);\n    });\n};\nvar deserializeAws_restJson1BatchUpdateDevicePositionError = function (output, context) {\n    return {\n        DeviceId: __expectString(output.DeviceId),\n        Error: output.Error !== undefined && output.Error !== null\n            ? deserializeAws_restJson1BatchItemError(output.Error, context)\n            : undefined,\n        SampleTime: output.SampleTime !== undefined && output.SampleTime !== null ? new Date(output.SampleTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1BatchUpdateDevicePositionErrorList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1BatchUpdateDevicePositionError(entry, context);\n    });\n};\nvar deserializeAws_restJson1BoundingBox = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return __handleFloat(entry);\n    });\n};\nvar deserializeAws_restJson1CalculateRouteSummary = function (output, context) {\n    return {\n        DataSource: __expectString(output.DataSource),\n        Distance: __handleFloat(output.Distance),\n        DistanceUnit: __expectString(output.DistanceUnit),\n        DurationSeconds: __handleFloat(output.DurationSeconds),\n        RouteBBox: output.RouteBBox !== undefined && output.RouteBBox !== null\n            ? deserializeAws_restJson1BoundingBox(output.RouteBBox, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1CountryCodeList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return __expectString(entry);\n    });\n};\nvar deserializeAws_restJson1DataSourceConfiguration = function (output, context) {\n    return {\n        IntendedUse: __expectString(output.IntendedUse),\n    };\n};\nvar deserializeAws_restJson1DevicePosition = function (output, context) {\n    return {\n        DeviceId: __expectString(output.DeviceId),\n        Position: output.Position !== undefined && output.Position !== null\n            ? deserializeAws_restJson1Position(output.Position, context)\n            : undefined,\n        ReceivedTime: output.ReceivedTime !== undefined && output.ReceivedTime !== null ? new Date(output.ReceivedTime) : undefined,\n        SampleTime: output.SampleTime !== undefined && output.SampleTime !== null ? new Date(output.SampleTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1DevicePositionList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1DevicePosition(entry, context);\n    });\n};\nvar deserializeAws_restJson1GeofenceGeometry = function (output, context) {\n    return {\n        Polygon: output.Polygon !== undefined && output.Polygon !== null\n            ? deserializeAws_restJson1LinearRings(output.Polygon, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1Leg = function (output, context) {\n    return {\n        Distance: __handleFloat(output.Distance),\n        DurationSeconds: __handleFloat(output.DurationSeconds),\n        EndPosition: output.EndPosition !== undefined && output.EndPosition !== null\n            ? deserializeAws_restJson1Position(output.EndPosition, context)\n            : undefined,\n        Geometry: output.Geometry !== undefined && output.Geometry !== null\n            ? deserializeAws_restJson1LegGeometry(output.Geometry, context)\n            : undefined,\n        StartPosition: output.StartPosition !== undefined && output.StartPosition !== null\n            ? deserializeAws_restJson1Position(output.StartPosition, context)\n            : undefined,\n        Steps: output.Steps !== undefined && output.Steps !== null\n            ? deserializeAws_restJson1StepList(output.Steps, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1LegGeometry = function (output, context) {\n    return {\n        LineString: output.LineString !== undefined && output.LineString !== null\n            ? deserializeAws_restJson1LineString(output.LineString, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1LegList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1Leg(entry, context);\n    });\n};\nvar deserializeAws_restJson1LinearRing = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1Position(entry, context);\n    });\n};\nvar deserializeAws_restJson1LinearRings = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1LinearRing(entry, context);\n    });\n};\nvar deserializeAws_restJson1LineString = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1Position(entry, context);\n    });\n};\nvar deserializeAws_restJson1ListDevicePositionsResponseEntry = function (output, context) {\n    return {\n        DeviceId: __expectString(output.DeviceId),\n        Position: output.Position !== undefined && output.Position !== null\n            ? deserializeAws_restJson1Position(output.Position, context)\n            : undefined,\n        SampleTime: output.SampleTime !== undefined && output.SampleTime !== null ? new Date(output.SampleTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1ListDevicePositionsResponseEntryList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1ListDevicePositionsResponseEntry(entry, context);\n    });\n};\nvar deserializeAws_restJson1ListGeofenceCollectionsResponseEntry = function (output, context) {\n    return {\n        CollectionName: __expectString(output.CollectionName),\n        CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n        Description: __expectString(output.Description),\n        PricingPlan: __expectString(output.PricingPlan),\n        PricingPlanDataSource: __expectString(output.PricingPlanDataSource),\n        UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1ListGeofenceCollectionsResponseEntryList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1ListGeofenceCollectionsResponseEntry(entry, context);\n    });\n};\nvar deserializeAws_restJson1ListGeofenceResponseEntry = function (output, context) {\n    return {\n        CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n        GeofenceId: __expectString(output.GeofenceId),\n        Geometry: output.Geometry !== undefined && output.Geometry !== null\n            ? deserializeAws_restJson1GeofenceGeometry(output.Geometry, context)\n            : undefined,\n        Status: __expectString(output.Status),\n        UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1ListGeofenceResponseEntryList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1ListGeofenceResponseEntry(entry, context);\n    });\n};\nvar deserializeAws_restJson1ListMapsResponseEntry = function (output, context) {\n    return {\n        CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n        DataSource: __expectString(output.DataSource),\n        Description: __expectString(output.Description),\n        MapName: __expectString(output.MapName),\n        PricingPlan: __expectString(output.PricingPlan),\n        UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1ListMapsResponseEntryList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1ListMapsResponseEntry(entry, context);\n    });\n};\nvar deserializeAws_restJson1ListPlaceIndexesResponseEntry = function (output, context) {\n    return {\n        CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n        DataSource: __expectString(output.DataSource),\n        Description: __expectString(output.Description),\n        IndexName: __expectString(output.IndexName),\n        PricingPlan: __expectString(output.PricingPlan),\n        UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1ListPlaceIndexesResponseEntryList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1ListPlaceIndexesResponseEntry(entry, context);\n    });\n};\nvar deserializeAws_restJson1ListRouteCalculatorsResponseEntry = function (output, context) {\n    return {\n        CalculatorName: __expectString(output.CalculatorName),\n        CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n        DataSource: __expectString(output.DataSource),\n        Description: __expectString(output.Description),\n        PricingPlan: __expectString(output.PricingPlan),\n        UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1ListRouteCalculatorsResponseEntryList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1ListRouteCalculatorsResponseEntry(entry, context);\n    });\n};\nvar deserializeAws_restJson1ListTrackersResponseEntry = function (output, context) {\n    return {\n        CreateTime: output.CreateTime !== undefined && output.CreateTime !== null ? new Date(output.CreateTime) : undefined,\n        Description: __expectString(output.Description),\n        PricingPlan: __expectString(output.PricingPlan),\n        PricingPlanDataSource: __expectString(output.PricingPlanDataSource),\n        TrackerName: __expectString(output.TrackerName),\n        UpdateTime: output.UpdateTime !== undefined && output.UpdateTime !== null ? new Date(output.UpdateTime) : undefined,\n    };\n};\nvar deserializeAws_restJson1ListTrackersResponseEntryList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1ListTrackersResponseEntry(entry, context);\n    });\n};\nvar deserializeAws_restJson1MapConfiguration = function (output, context) {\n    return {\n        Style: __expectString(output.Style),\n    };\n};\nvar deserializeAws_restJson1Place = function (output, context) {\n    return {\n        AddressNumber: __expectString(output.AddressNumber),\n        Country: __expectString(output.Country),\n        Geometry: output.Geometry !== undefined && output.Geometry !== null\n            ? deserializeAws_restJson1PlaceGeometry(output.Geometry, context)\n            : undefined,\n        Label: __expectString(output.Label),\n        Municipality: __expectString(output.Municipality),\n        Neighborhood: __expectString(output.Neighborhood),\n        PostalCode: __expectString(output.PostalCode),\n        Region: __expectString(output.Region),\n        Street: __expectString(output.Street),\n        SubRegion: __expectString(output.SubRegion),\n    };\n};\nvar deserializeAws_restJson1PlaceGeometry = function (output, context) {\n    return {\n        Point: output.Point !== undefined && output.Point !== null\n            ? deserializeAws_restJson1Position(output.Point, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1Position = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return __handleFloat(entry);\n    });\n};\nvar deserializeAws_restJson1SearchForPositionResult = function (output, context) {\n    return {\n        Place: output.Place !== undefined && output.Place !== null\n            ? deserializeAws_restJson1Place(output.Place, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1SearchForPositionResultList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1SearchForPositionResult(entry, context);\n    });\n};\nvar deserializeAws_restJson1SearchForTextResult = function (output, context) {\n    return {\n        Place: output.Place !== undefined && output.Place !== null\n            ? deserializeAws_restJson1Place(output.Place, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1SearchForTextResultList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1SearchForTextResult(entry, context);\n    });\n};\nvar deserializeAws_restJson1SearchPlaceIndexForPositionSummary = function (output, context) {\n    return {\n        DataSource: __expectString(output.DataSource),\n        MaxResults: __expectNumber(output.MaxResults),\n        Position: output.Position !== undefined && output.Position !== null\n            ? deserializeAws_restJson1Position(output.Position, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1SearchPlaceIndexForTextSummary = function (output, context) {\n    return {\n        BiasPosition: output.BiasPosition !== undefined && output.BiasPosition !== null\n            ? deserializeAws_restJson1Position(output.BiasPosition, context)\n            : undefined,\n        DataSource: __expectString(output.DataSource),\n        FilterBBox: output.FilterBBox !== undefined && output.FilterBBox !== null\n            ? deserializeAws_restJson1BoundingBox(output.FilterBBox, context)\n            : undefined,\n        FilterCountries: output.FilterCountries !== undefined && output.FilterCountries !== null\n            ? deserializeAws_restJson1CountryCodeList(output.FilterCountries, context)\n            : undefined,\n        MaxResults: __expectNumber(output.MaxResults),\n        ResultBBox: output.ResultBBox !== undefined && output.ResultBBox !== null\n            ? deserializeAws_restJson1BoundingBox(output.ResultBBox, context)\n            : undefined,\n        Text: __expectString(output.Text),\n    };\n};\nvar deserializeAws_restJson1Step = function (output, context) {\n    return {\n        Distance: __handleFloat(output.Distance),\n        DurationSeconds: __handleFloat(output.DurationSeconds),\n        EndPosition: output.EndPosition !== undefined && output.EndPosition !== null\n            ? deserializeAws_restJson1Position(output.EndPosition, context)\n            : undefined,\n        GeometryOffset: __expectNumber(output.GeometryOffset),\n        StartPosition: output.StartPosition !== undefined && output.StartPosition !== null\n            ? deserializeAws_restJson1Position(output.StartPosition, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1StepList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1Step(entry, context);\n    });\n};\nvar deserializeAws_restJson1TagMap = function (output, context) {\n    return Object.entries(output).reduce(function (acc, _a) {\n        var _b;\n        var _c = __read(_a, 2), key = _c[0], value = _c[1];\n        if (value === null) {\n            return acc;\n        }\n        return __assign(__assign({}, acc), (_b = {}, _b[key] = __expectString(value), _b));\n    }, {});\n};\nvar deserializeAws_restJson1ValidationExceptionField = function (output, context) {\n    return {\n        Message: __expectString(output.message),\n        Name: __expectString(output.name),\n    };\n};\nvar deserializeAws_restJson1ValidationExceptionFieldList = function (output, context) {\n    return (output || [])\n        .filter(function (e) { return e != null; })\n        .map(function (entry) {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1ValidationExceptionField(entry, context);\n    });\n};\nvar deserializeMetadata = function (output) {\n    var _a;\n    return ({\n        httpStatusCode: output.statusCode,\n        requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n    });\n};\n// Collect low-level response body stream to Uint8Array.\nvar collectBody = function (streamBody, context) {\n    if (streamBody === void 0) { streamBody = new Uint8Array(); }\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n// Encode Uint8Array data into string with utf-8.\nvar collectBodyString = function (streamBody, context) {\n    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });\n};\nvar isSerializableHeaderValue = function (value) {\n    return value !== undefined &&\n        value !== null &&\n        value !== \"\" &&\n        (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n        (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\nvar parseBody = function (streamBody, context) {\n    return collectBodyString(streamBody, context).then(function (encoded) {\n        if (encoded.length) {\n            return JSON.parse(encoded);\n        }\n        return {};\n    });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nvar loadRestJsonErrorCode = function (output, data) {\n    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };\n    var sanitizeErrorCode = function (rawValue) {\n        var cleanValue = rawValue;\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n    return \"\";\n};\n//# sourceMappingURL=Aws_restJson1.js.map"]},"metadata":{},"sourceType":"module"}