{"ast":null,"code":"/**\n * Serializes a number, turning non-numeric values into strings.\n *\n * @param value The number to serialize.\n * @returns A number, or a string if the given number was non-numeric.\n */\nexport var serializeFloat = function (value) {\n  // NaN is not equal to everything, including itself.\n  if (value !== value) {\n    return \"NaN\";\n  }\n\n  switch (value) {\n    case Infinity:\n      return \"Infinity\";\n\n    case -Infinity:\n      return \"-Infinity\";\n\n    default:\n      return value;\n  }\n};","map":{"version":3,"sources":["../../src/ser-utils.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AACH,OAAO,IAAM,cAAc,GAAG,UAAC,KAAD,EAAc;AAC1C;AACA,MAAI,KAAK,KAAK,KAAd,EAAqB;AACnB,WAAO,KAAP;AACD;;AACD,UAAQ,KAAR;AACE,SAAK,QAAL;AACE,aAAO,UAAP;;AACF,SAAK,CAAC,QAAN;AACE,aAAO,WAAP;;AACF;AACE,aAAO,KAAP;AANJ;AAQD,CAbM","sourcesContent":["/**\n * Serializes a number, turning non-numeric values into strings.\n *\n * @param value The number to serialize.\n * @returns A number, or a string if the given number was non-numeric.\n */\nexport const serializeFloat = (value: number): string | number => {\n  // NaN is not equal to everything, including itself.\n  if (value !== value) {\n    return \"NaN\";\n  }\n  switch (value) {\n    case Infinity:\n      return \"Infinity\";\n    case -Infinity:\n      return \"-Infinity\";\n    default:\n      return value;\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}