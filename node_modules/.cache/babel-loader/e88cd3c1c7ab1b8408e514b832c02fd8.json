{"ast":null,"code":"import { __assign } from \"tslib\";\nexport function resolveUserAgentConfig(input) {\n  return __assign(__assign({}, input), {\n    customUserAgent: typeof input.customUserAgent === \"string\" ? [[input.customUserAgent]] : input.customUserAgent\n  });\n}","map":{"version":3,"sources":["../../src/configurations.ts"],"names":[],"mappings":";AA0BA,OAAM,SAAU,sBAAV,CACJ,KADI,EACgD;AAEpD,SAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,IAAA,eAAe,EAAE,OAAO,KAAK,CAAC,eAAb,KAAiC,QAAjC,GAA4C,CAAC,CAAC,KAAK,CAAC,eAAP,CAAD,CAA5C,GAAwE,KAAK,CAAC;AADvF,GADV,CAAA;AAID","sourcesContent":["import { Provider, UserAgent } from \"@aws-sdk/types\";\nexport interface UserAgentInputConfig {\n  /**\n   * The custom user agent header that would be appended to default one\n   */\n  customUserAgent?: string | UserAgent;\n}\ninterface PreviouslyResolved {\n  defaultUserAgentProvider: Provider<UserAgent>;\n  runtime: string;\n}\nexport interface UserAgentResolvedConfig {\n  /**\n   * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header.\n   * @internal\n   */\n  defaultUserAgentProvider: Provider<UserAgent>;\n  /**\n   * The custom user agent header that would be appended to default one\n   */\n  customUserAgent?: UserAgent;\n  /**\n   * The runtime environment\n   */\n  runtime: string;\n}\nexport function resolveUserAgentConfig<T>(\n  input: T & PreviouslyResolved & UserAgentInputConfig\n): T & UserAgentResolvedConfig {\n  return {\n    ...input,\n    customUserAgent: typeof input.customUserAgent === \"string\" ? [[input.customUserAgent]] : input.customUserAgent,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}