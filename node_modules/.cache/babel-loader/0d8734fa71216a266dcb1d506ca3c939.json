{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport bowser from \"bowser\";\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and version\n */\n\nexport var defaultUserAgent = function (_a) {\n  var serviceId = _a.serviceId,\n      clientVersion = _a.clientVersion;\n  return function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var parsedUA, sections;\n\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      return __generator(this, function (_h) {\n        parsedUA = typeof window !== \"undefined\" && ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) ? bowser.parse(window.navigator.userAgent) : undefined;\n        sections = [// sdk-metadata\n        [\"aws-sdk-js\", clientVersion], // os-metadata\n        [\"os/\" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || \"other\"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version], // language-metadata\n        // ECMAScript edition doesn't matter in JS.\n        [\"lang/js\"], // browser vendor and version.\n        [\"md/browser\", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : \"unknown\") + \"_\" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : \"unknown\")]];\n\n        if (serviceId) {\n          // api-metadata\n          // service Id may not appear in non-AWS clients\n          sections.push([\"api/\" + serviceId, clientVersion]);\n        }\n\n        return [2\n        /*return*/\n        , sections];\n      });\n    });\n  };\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";AACA,OAAO,MAAP,MAAmB,QAAnB;AAIA;;;AAGG;;AACH,OAAO,IAAM,gBAAgB,GAC3B,UAAC,EAAD,EAAsD;MAAnD,SAAS,GAAA,EAAA,CAAA,S;MAAE,aAAa,GAAA,EAAA,CAAA,a;AAC3B,SAAA,YAAA;AAAA,WAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AACQ,QAAA,QAAQ,GACZ,OAAO,MAAP,KAAkB,WAAlB,KAAiC,CAAA,EAAA,GAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,SAAR,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,SAApD,IACI,MAAM,CAAC,KAAP,CAAa,MAAM,CAAC,SAAP,CAAiB,SAA9B,CADJ,GAEI,SAHA;AAIA,QAAA,QAAQ,GAAc,CAC1B;AACA,SAAC,YAAD,EAAe,aAAf,CAF0B,EAG1B;AACA,SAAC,SAAM,CAAA,CAAA,EAAA,GAAA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,EAAV,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,IAAd,KAAsB,OAA5B,CAAD,EAAwC,CAAA,EAAA,GAAA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,EAAV,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,OAAtD,CAJ0B,EAK1B;AACA;AACA,SAAC,SAAD,CAP0B,EAQ1B;AACA,SAAC,YAAD,EAAe,CAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,OAAV,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,IAAnB,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,EAAvB,GAA2B,SAA9B,IAAuC,GAAvC,IAA2C,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,OAAV,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,OAAnB,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,EAA1B,GAA8B,SAAzE,CAAf,CAT0B,CAAtB;;AAYN,YAAI,SAAJ,EAAe;AACb;AACA;AACA,UAAA,QAAQ,CAAC,IAAT,CAAc,CAAC,SAAO,SAAR,EAAqB,aAArB,CAAd;AACD;;AAED,eAAA,CAAA;AAAA;AAAA,UAAO,QAAP,CAAA;;KAvBF,CAAA;AAwBC,GAxBD;AAwBC,CA1BI","sourcesContent":["import { Provider, UserAgent } from \"@aws-sdk/types\";\nimport bowser from \"bowser\";\n\nimport { DefaultUserAgentOptions } from \"./configurations\";\n\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and version\n */\nexport const defaultUserAgent =\n  ({ serviceId, clientVersion }: DefaultUserAgentOptions): Provider<UserAgent> =>\n  async () => {\n    const parsedUA =\n      typeof window !== \"undefined\" && window?.navigator?.userAgent\n        ? bowser.parse(window.navigator.userAgent)\n        : undefined;\n    const sections: UserAgent = [\n      // sdk-metadata\n      [\"aws-sdk-js\", clientVersion],\n      // os-metadata\n      [`os/${parsedUA?.os?.name || \"other\"}`, parsedUA?.os?.version],\n      // language-metadata\n      // ECMAScript edition doesn't matter in JS.\n      [\"lang/js\"],\n      // browser vendor and version.\n      [\"md/browser\", `${parsedUA?.browser?.name ?? \"unknown\"}_${parsedUA?.browser?.version ?? \"unknown\"}`],\n    ];\n\n    if (serviceId) {\n      // api-metadata\n      // service Id may not appear in non-AWS clients\n      sections.push([`api/${serviceId}`, clientVersion]);\n    }\n\n    return sections;\n  };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}