{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateGeofenceCollectionRequest, CreateGeofenceCollectionResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1CreateGeofenceCollectionCommand, serializeAws_restJson1CreateGeofenceCollectionCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a geofence collection, which manages and stores geofences.</p>\n * @example\n * Use a bare-bones client and the command you need to make an API call.\n * ```javascript\n * import { LocationClient, CreateGeofenceCollectionCommand } from \"@aws-sdk/client-location\"; // ES Modules import\n * // const { LocationClient, CreateGeofenceCollectionCommand } = require(\"@aws-sdk/client-location\"); // CommonJS import\n * const client = new LocationClient(config);\n * const command = new CreateGeofenceCollectionCommand(input);\n * const response = await client.send(command);\n * ```\n *\n * @see {@link CreateGeofenceCollectionCommandInput} for command's `input` shape.\n * @see {@link CreateGeofenceCollectionCommandOutput} for command's `response` shape.\n * @see {@link LocationClientResolvedConfig | config} for command's `input` shape.\n *\n */\n\nvar CreateGeofenceCollectionCommand =\n/** @class */\nfunction (_super) {\n  __extends(CreateGeofenceCollectionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CreateGeofenceCollectionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CreateGeofenceCollectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"LocationClient\";\n    var commandName = \"CreateGeofenceCollectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateGeofenceCollectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateGeofenceCollectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CreateGeofenceCollectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1CreateGeofenceCollectionCommand(input, context);\n  };\n\n  CreateGeofenceCollectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1CreateGeofenceCollectionCommand(output, context);\n  };\n\n  return CreateGeofenceCollectionCommand;\n}($Command);\n\nexport { CreateGeofenceCollectionCommand };","map":{"version":3,"sources":["../../../commands/CreateGeofenceCollectionCommand.ts"],"names":[],"mappings":";AACA,SAAS,+BAAT,EAA0C,gCAA1C,QAAkF,oBAAlF;AACA,SACE,uDADF,EAEE,qDAFF,QAGO,4BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;AAgBG;;AACH,IAAA,+BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqD,EAAA,SAAA,CAAA,+BAAA,EAAA,MAAA,CAAA,CAArD,CAKE;AACA;;;AAEA,WAAA,+BAAA,CAAqB,KAArB,EAAgE;AAAhE,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAA2C,CAG9D;AACD;AAED;;AAEG;;;AACH,EAAA,+BAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,gBAAnB;AACA,QAAM,WAAW,GAAG,iCAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,+BAA+B,CAAC,kBAJF;AAKvD,MAAA,wBAAwB,EAAE,gCAAgC,CAAC;AALJ,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,+BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAA+D,OAA/D,EAAsF;AACpF,WAAO,qDAAqD,CAAC,KAAD,EAAQ,OAAR,CAA5D;AACD,GAFO;;AAIA,EAAA,+BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,uDAAuD,CAAC,MAAD,EAAS,OAAT,CAA9D;AACD,GAFO;;AAMV,SAAA,+BAAA;AAAC,CAtDD,CAAqD,QAArD,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { CreateGeofenceCollectionRequest, CreateGeofenceCollectionResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1CreateGeofenceCollectionCommand, serializeAws_restJson1CreateGeofenceCollectionCommand, } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a geofence collection, which manages and stores geofences.</p>\n * @example\n * Use a bare-bones client and the command you need to make an API call.\n * ```javascript\n * import { LocationClient, CreateGeofenceCollectionCommand } from \"@aws-sdk/client-location\"; // ES Modules import\n * // const { LocationClient, CreateGeofenceCollectionCommand } = require(\"@aws-sdk/client-location\"); // CommonJS import\n * const client = new LocationClient(config);\n * const command = new CreateGeofenceCollectionCommand(input);\n * const response = await client.send(command);\n * ```\n *\n * @see {@link CreateGeofenceCollectionCommandInput} for command's `input` shape.\n * @see {@link CreateGeofenceCollectionCommandOutput} for command's `response` shape.\n * @see {@link LocationClientResolvedConfig | config} for command's `input` shape.\n *\n */\nvar CreateGeofenceCollectionCommand = /** @class */ (function (_super) {\n    __extends(CreateGeofenceCollectionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function CreateGeofenceCollectionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    CreateGeofenceCollectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"LocationClient\";\n        var commandName = \"CreateGeofenceCollectionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: CreateGeofenceCollectionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: CreateGeofenceCollectionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    CreateGeofenceCollectionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restJson1CreateGeofenceCollectionCommand(input, context);\n    };\n    CreateGeofenceCollectionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restJson1CreateGeofenceCollectionCommand(output, context);\n    };\n    return CreateGeofenceCollectionCommand;\n}($Command));\nexport { CreateGeofenceCollectionCommand };\n//# sourceMappingURL=CreateGeofenceCollectionCommand.js.map"]},"metadata":{},"sourceType":"module"}