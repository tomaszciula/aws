{"ast":null,"code":"import objectValues from '../polyfills/objectValues';\nimport keyMap from '../jsutils/keyMap';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { print } from '../language/printer';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNonNullType, isListType, isNamedType, isRequiredArgument, isRequiredInputField } from '../type/definition';\nimport { astFromValue } from './astFromValue';\nexport var BreakingChangeType = Object.freeze({\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'\n});\nexport var DangerousChangeType = Object.freeze({\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',\n  OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'\n});\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\n\nexport function findBreakingChanges(oldSchema, newSchema) {\n  var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in BreakingChangeType;\n  });\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in DangerousChangeType;\n  });\n  return dangerousChanges;\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n\n  for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {\n    var oldDirective = _directivesDiff$remov2[_i2];\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: \"\".concat(oldDirective.name, \" was removed.\")\n    });\n  }\n\n  for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {\n    var _ref2 = _directivesDiff$persi2[_i4];\n    var _oldDirective = _ref2[0];\n    var newDirective = _ref2[1];\n    var argsDiff = diff(_oldDirective.args, newDirective.args);\n\n    for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {\n      var newArg = _argsDiff$added2[_i6];\n\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: \"A required arg \".concat(newArg.name, \" on directive \").concat(_oldDirective.name, \" was added.\")\n        });\n      }\n    }\n\n    for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {\n      var oldArg = _argsDiff$removed2[_i8];\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: \"\".concat(oldArg.name, \" was removed from \").concat(_oldDirective.name, \".\")\n      });\n    }\n\n    for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {\n      var location = _oldDirective$locatio2[_i10];\n\n      if (newDirective.locations.indexOf(location) === -1) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: \"\".concat(location, \" was removed from \").concat(_oldDirective.name, \".\")\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var typesDiff = diff(objectValues(oldSchema.getTypeMap()), objectValues(newSchema.getTypeMap()));\n\n  for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {\n    var oldType = _typesDiff$removed2[_i12];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: \"\".concat(oldType.name, \" was removed.\")\n    });\n  }\n\n  for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {\n    var _ref4 = _typesDiff$persisted2[_i14];\n    var _oldType = _ref4[0];\n    var newType = _ref4[1];\n\n    if (isEnumType(_oldType) && isEnumType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));\n    } else if (isUnionType(_oldType) && isUnionType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));\n    } else if (isInputObjectType(_oldType) && isInputObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));\n    } else if (isObjectType(_oldType) && isObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findObjectTypeChanges(_oldType, newType));\n    } else if (isInterfaceType(_oldType) && isInterfaceType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType));\n    } else if (_oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: \"\".concat(_oldType.name, \" changed from \") + \"\".concat(typeKindName(_oldType), \" to \").concat(typeKindName(newType), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {\n    var newField = _fieldsDiff$added2[_i16];\n\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: \"A required field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: \"An optional field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    }\n  }\n\n  for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {\n    var oldField = _fieldsDiff$removed2[_i18];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {\n    var _ref6 = _fieldsDiff$persisted2[_i20];\n    var _oldField = _ref6[0];\n    var _newField = _ref6[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField.name, \" changed type from \") + \"\".concat(String(_oldField.type), \" to \").concat(String(_newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {\n    var newPossibleType = _possibleTypesDiff$ad2[_i22];\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: \"\".concat(newPossibleType.name, \" was added to union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {\n    var oldPossibleType = _possibleTypesDiff$re2[_i24];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: \"\".concat(oldPossibleType.name, \" was removed from union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {\n    var newValue = _valuesDiff$added2[_i26];\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: \"\".concat(newValue.name, \" was added to enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {\n    var oldValue = _valuesDiff$removed2[_i28];\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: \"\".concat(oldValue.name, \" was removed from enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findObjectTypeChanges(oldType, newType) {\n  var schemaChanges = findFieldChanges(oldType, newType);\n  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {\n    var newInterface = _interfacesDiff$added2[_i30];\n    schemaChanges.push({\n      type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n      description: \"\".concat(newInterface.name, \" added to interfaces implemented by \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {\n    var oldInterface = _interfacesDiff$remov2[_i32];\n    schemaChanges.push({\n      type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n      description: \"\".concat(oldType.name, \" no longer implements interface \").concat(oldInterface.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {\n    var oldField = _fieldsDiff$removed4[_i34];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {\n    var _ref8 = _fieldsDiff$persisted4[_i36];\n    var _oldField2 = _ref8[0];\n    var newField = _ref8[1];\n    schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));\n    var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField2.name, \" changed type from \") + \"\".concat(String(_oldField2.type), \" to \").concat(String(newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  var schemaChanges = [];\n  var argsDiff = diff(oldField.args, newField.args);\n\n  for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {\n    var oldArg = _argsDiff$removed4[_i38];\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(oldArg.name, \" was removed.\")\n    });\n  }\n\n  for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {\n    var _ref10 = _argsDiff$persisted2[_i40];\n    var _oldArg = _ref10[0];\n    var newArg = _ref10[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed type from \") + \"\".concat(String(_oldArg.type), \" to \").concat(String(newArg.type), \".\")\n      });\n    } else if (_oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" defaultValue was removed.\")\n        });\n      } else {\n        var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);\n        var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed defaultValue from \").concat(oldValueStr, \" to \").concat(newValueStr, \".\")\n          });\n        }\n      }\n    }\n  }\n\n  for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {\n    var _newArg = _argsDiff$added4[_i42];\n\n    if (isRequiredArgument(_newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: \"A required arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: \"An optional arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (// if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n\n  return (// if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n\n  if (isNonNullType(oldType)) {\n    return (// if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n  /* istanbul ignore else */\n\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  } // Not reachable. All possible named types have been considered.\n\n  /* istanbul ignore next */\n\n\n  invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  var ast = astFromValue(value, type);\n  /* istanbul ignore next */\n\n  ast != null || invariant(0);\n  return print(ast);\n}\n\nfunction diff(oldArray, newArray) {\n  var added = [];\n  var removed = [];\n  var persisted = [];\n  var oldMap = keyMap(oldArray, function (_ref11) {\n    var name = _ref11.name;\n    return name;\n  });\n  var newMap = keyMap(newArray, function (_ref12) {\n    var name = _ref12.name;\n    return name;\n  });\n\n  for (var _i44 = 0; _i44 < oldArray.length; _i44++) {\n    var oldItem = oldArray[_i44];\n    var newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (var _i46 = 0; _i46 < newArray.length; _i46++) {\n    var _newItem = newArray[_i46];\n\n    if (oldMap[_newItem.name] === undefined) {\n      added.push(_newItem);\n    }\n  }\n\n  return {\n    added: added,\n    persisted: persisted,\n    removed: removed\n  };\n}","map":{"version":3,"sources":["/Users/tomaszciula/projects/aws/node_modules/@aws-amplify/api-graphql/node_modules/graphql/utilities/findBreakingChanges.mjs"],"names":["objectValues","keyMap","inspect","invariant","print","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isNonNullType","isListType","isNamedType","isRequiredArgument","isRequiredInputField","astFromValue","BreakingChangeType","Object","freeze","TYPE_REMOVED","TYPE_CHANGED_KIND","TYPE_REMOVED_FROM_UNION","VALUE_REMOVED_FROM_ENUM","REQUIRED_INPUT_FIELD_ADDED","INTERFACE_REMOVED_FROM_OBJECT","FIELD_REMOVED","FIELD_CHANGED_KIND","REQUIRED_ARG_ADDED","ARG_REMOVED","ARG_CHANGED_KIND","DIRECTIVE_REMOVED","DIRECTIVE_ARG_REMOVED","REQUIRED_DIRECTIVE_ARG_ADDED","DIRECTIVE_LOCATION_REMOVED","DangerousChangeType","VALUE_ADDED_TO_ENUM","TYPE_ADDED_TO_UNION","OPTIONAL_INPUT_FIELD_ADDED","OPTIONAL_ARG_ADDED","INTERFACE_ADDED_TO_OBJECT","ARG_DEFAULT_VALUE_CHANGE","findBreakingChanges","oldSchema","newSchema","breakingChanges","findSchemaChanges","filter","change","type","findDangerousChanges","dangerousChanges","concat","findTypeChanges","findDirectiveChanges","schemaChanges","directivesDiff","diff","getDirectives","_i2","_directivesDiff$remov2","removed","length","oldDirective","push","description","name","_i4","_directivesDiff$persi2","persisted","_ref2","_oldDirective","newDirective","argsDiff","args","_i6","_argsDiff$added2","added","newArg","_i8","_argsDiff$removed2","oldArg","_i10","_oldDirective$locatio2","locations","location","indexOf","typesDiff","getTypeMap","_i12","_typesDiff$removed2","oldType","_i14","_typesDiff$persisted2","_ref4","_oldType","newType","apply","findEnumTypeChanges","findUnionTypeChanges","findInputObjectTypeChanges","findObjectTypeChanges","findFieldChanges","constructor","typeKindName","fieldsDiff","getFields","_i16","_fieldsDiff$added2","newField","_i18","_fieldsDiff$removed2","oldField","_i20","_fieldsDiff$persisted2","_ref6","_oldField","_newField","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","String","possibleTypesDiff","getTypes","_i22","_possibleTypesDiff$ad2","newPossibleType","_i24","_possibleTypesDiff$re2","oldPossibleType","valuesDiff","getValues","_i26","_valuesDiff$added2","newValue","_i28","_valuesDiff$removed2","oldValue","interfacesDiff","getInterfaces","_i30","_interfacesDiff$added2","newInterface","_i32","_interfacesDiff$remov2","oldInterface","_i34","_fieldsDiff$removed4","_i36","_fieldsDiff$persisted4","_ref8","_oldField2","findArgChanges","isChangeSafeForObjectOrInterfaceField","_i38","_argsDiff$removed4","_i40","_argsDiff$persisted2","_ref10","_oldArg","defaultValue","undefined","oldValueStr","stringifyValue","newValueStr","_i42","_argsDiff$added4","_newArg","ofType","value","ast","oldArray","newArray","oldMap","_ref11","newMap","_ref12","_i44","oldItem","newItem","_i46","_newItem"],"mappings":"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","sourcesContent":["import objectValues from '../polyfills/objectValues';\nimport keyMap from '../jsutils/keyMap';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { print } from '../language/printer';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNonNullType, isListType, isNamedType, isRequiredArgument, isRequiredInputField } from '../type/definition';\nimport { astFromValue } from './astFromValue';\nexport var BreakingChangeType = Object.freeze({\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'\n});\nexport var DangerousChangeType = Object.freeze({\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',\n  OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'\n});\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in BreakingChangeType;\n  });\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in DangerousChangeType;\n  });\n  return dangerousChanges;\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n\n  for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {\n    var oldDirective = _directivesDiff$remov2[_i2];\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: \"\".concat(oldDirective.name, \" was removed.\")\n    });\n  }\n\n  for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {\n    var _ref2 = _directivesDiff$persi2[_i4];\n    var _oldDirective = _ref2[0];\n    var newDirective = _ref2[1];\n    var argsDiff = diff(_oldDirective.args, newDirective.args);\n\n    for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {\n      var newArg = _argsDiff$added2[_i6];\n\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: \"A required arg \".concat(newArg.name, \" on directive \").concat(_oldDirective.name, \" was added.\")\n        });\n      }\n    }\n\n    for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {\n      var oldArg = _argsDiff$removed2[_i8];\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: \"\".concat(oldArg.name, \" was removed from \").concat(_oldDirective.name, \".\")\n      });\n    }\n\n    for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {\n      var location = _oldDirective$locatio2[_i10];\n\n      if (newDirective.locations.indexOf(location) === -1) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: \"\".concat(location, \" was removed from \").concat(_oldDirective.name, \".\")\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var typesDiff = diff(objectValues(oldSchema.getTypeMap()), objectValues(newSchema.getTypeMap()));\n\n  for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {\n    var oldType = _typesDiff$removed2[_i12];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: \"\".concat(oldType.name, \" was removed.\")\n    });\n  }\n\n  for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {\n    var _ref4 = _typesDiff$persisted2[_i14];\n    var _oldType = _ref4[0];\n    var newType = _ref4[1];\n\n    if (isEnumType(_oldType) && isEnumType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));\n    } else if (isUnionType(_oldType) && isUnionType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));\n    } else if (isInputObjectType(_oldType) && isInputObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));\n    } else if (isObjectType(_oldType) && isObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findObjectTypeChanges(_oldType, newType));\n    } else if (isInterfaceType(_oldType) && isInterfaceType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType));\n    } else if (_oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: \"\".concat(_oldType.name, \" changed from \") + \"\".concat(typeKindName(_oldType), \" to \").concat(typeKindName(newType), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {\n    var newField = _fieldsDiff$added2[_i16];\n\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: \"A required field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: \"An optional field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    }\n  }\n\n  for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {\n    var oldField = _fieldsDiff$removed2[_i18];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {\n    var _ref6 = _fieldsDiff$persisted2[_i20];\n    var _oldField = _ref6[0];\n    var _newField = _ref6[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField.name, \" changed type from \") + \"\".concat(String(_oldField.type), \" to \").concat(String(_newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {\n    var newPossibleType = _possibleTypesDiff$ad2[_i22];\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: \"\".concat(newPossibleType.name, \" was added to union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {\n    var oldPossibleType = _possibleTypesDiff$re2[_i24];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: \"\".concat(oldPossibleType.name, \" was removed from union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {\n    var newValue = _valuesDiff$added2[_i26];\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: \"\".concat(newValue.name, \" was added to enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {\n    var oldValue = _valuesDiff$removed2[_i28];\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: \"\".concat(oldValue.name, \" was removed from enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findObjectTypeChanges(oldType, newType) {\n  var schemaChanges = findFieldChanges(oldType, newType);\n  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {\n    var newInterface = _interfacesDiff$added2[_i30];\n    schemaChanges.push({\n      type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n      description: \"\".concat(newInterface.name, \" added to interfaces implemented by \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {\n    var oldInterface = _interfacesDiff$remov2[_i32];\n    schemaChanges.push({\n      type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n      description: \"\".concat(oldType.name, \" no longer implements interface \").concat(oldInterface.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {\n    var oldField = _fieldsDiff$removed4[_i34];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {\n    var _ref8 = _fieldsDiff$persisted4[_i36];\n    var _oldField2 = _ref8[0];\n    var newField = _ref8[1];\n    schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));\n    var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField2.name, \" changed type from \") + \"\".concat(String(_oldField2.type), \" to \").concat(String(newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  var schemaChanges = [];\n  var argsDiff = diff(oldField.args, newField.args);\n\n  for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {\n    var oldArg = _argsDiff$removed4[_i38];\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(oldArg.name, \" was removed.\")\n    });\n  }\n\n  for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {\n    var _ref10 = _argsDiff$persisted2[_i40];\n    var _oldArg = _ref10[0];\n    var newArg = _ref10[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed type from \") + \"\".concat(String(_oldArg.type), \" to \").concat(String(newArg.type), \".\")\n      });\n    } else if (_oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" defaultValue was removed.\")\n        });\n      } else {\n        var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);\n        var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed defaultValue from \").concat(oldValueStr, \" to \").concat(newValueStr, \".\")\n          });\n        }\n      }\n    }\n  }\n\n  for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {\n    var _newArg = _argsDiff$added4[_i42];\n\n    if (isRequiredArgument(_newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: \"A required arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: \"An optional arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (// if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n\n  return (// if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n\n  if (isNonNullType(oldType)) {\n    return (// if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  /* istanbul ignore else */\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  } // Not reachable. All possible named types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  var ast = astFromValue(value, type);\n\n  /* istanbul ignore next */\n  ast != null || invariant(0);\n  return print(ast);\n}\n\nfunction diff(oldArray, newArray) {\n  var added = [];\n  var removed = [];\n  var persisted = [];\n  var oldMap = keyMap(oldArray, function (_ref11) {\n    var name = _ref11.name;\n    return name;\n  });\n  var newMap = keyMap(newArray, function (_ref12) {\n    var name = _ref12.name;\n    return name;\n  });\n\n  for (var _i44 = 0; _i44 < oldArray.length; _i44++) {\n    var oldItem = oldArray[_i44];\n    var newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (var _i46 = 0; _i46 < newArray.length; _i46++) {\n    var _newItem = newArray[_i46];\n\n    if (oldMap[_newItem.name] === undefined) {\n      added.push(_newItem);\n    }\n  }\n\n  return {\n    added: added,\n    persisted: persisted,\n    removed: removed\n  };\n}\n"]},"metadata":{},"sourceType":"module"}